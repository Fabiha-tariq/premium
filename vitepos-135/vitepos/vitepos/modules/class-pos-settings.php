<?php
/**
 * Its for EPOS settings module
 *
 * @package VitePos\Modules
 */

namespace VitePos\Modules;

use Appsbd\V1\Core\BaseModel;
use Appsbd\V1\Core\BaseModule;
use Appsbd\V1\libs\Ajax_Confirm_Response;
use Appsbd\V1\libs\AppInput;
use Cassandra\Map;
use VitePos\Libs\Client_Language;
use VitePos\Libs\Invoice_Settings;
use VitePos\Libs\Manifest;
use VitePos\Libs\POS_Customer;
use VitePos\Libs\POS_Order;
use VitePos\Libs\Recaptcha;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer_Log;
use Vitepos\Models\Database\Mapbd_Pos_Cash_Drawer_Types;
use Vitepos\Models\Database\Mapbd_pos_counter;
use Vitepos\Models\Database\Mapbd_pos_purchase;
use Vitepos\Models\Database\Mapbd_pos_purchase_item;
use Vitepos\Models\Database\Mapbd_Pos_Role;
use Vitepos\Models\Database\Mapbd_pos_vendor;
use Vitepos\Models\Database\Mapbd_pos_warehouse;

/**
 * Class APBD_EPOS_Settings
 */
class POS_Settings extends BaseModule {
	/**
	 * Its property _synced_product_ids
	 *
	 * @var array
	 */
	private static $_synced_product_ids = array();

	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {
		add_filter(
			'appsbd/input/html/fields',
			function ( $html_fields ) {
				$html_fields[] = 'header';
				$html_fields[] = 'footer';

				return $html_fields;
			}
		);
		add_filter( 'woocommerce_order_data_store_cpt_get_orders_query', array( $this, 'vt_meta_query_filter' ), 10, 2 );
		add_filter( 'woocommerce_product_data_store_cpt_get_products_query', array( $this, 'vt_meta_query_filter' ), 10, 2 );
		add_action( 'apbd-vtpos/action/save-product-feature-image', array( $this, 'save_update_product_feature_img' ) );
		add_action( 'apbd-vtpos/action/save-product-gallery-image', array( $this, 'save_update_product_gallery_img' ), 10, 2 );
		add_action( 'apbd-vtpos/action/save-product-variation-image', array( $this, 'save_update_product_variation_img' ), 10, 3 );
		add_filter( 'display_post_states', array( $this, 'post_states' ), 10, 2 );

	}
	public static function do_version_update( $current_version, $previous_version, $isForce = false ) {
		if ( $isForce || version_compare( $previous_version, "1.3", '<' ) ) {
			Mapbd_Pos_Role::db_column_add_or_modify("max_discount", "decimal", "6,2", "20.00", "NOT NULL", "slug", "", "");
			Mapbd_Pos_Role::db_column_add_or_modify("discount_type", "char", "1", "'P'", "NOT NULL", "max_discount", "radio(P=Percentage,A=Amount)", "");
			Mapbd_Pos_Role::update_max_discount_non_editable(100);
		}
	}

	function on_plugin_version_updated( $current_version, $previous_version ) {
		self::do_version_update( $current_version, $previous_version, false );
	}
	/**
	 * The getFavicon is generated by appsbd
	 *
	 * @return array|mixed|string
	 */
	public function get_favicon() {
		return $this->get_option( 'pos_fav_icon', $this->get_plugin_url( 'templates/pos-assets/favicon.png' ) );
	}
	/**
	 * The vt item meta filter is generated by appsbd
	 *
	 * @param mixed $formatted_meta Its formatted meta data.
	 *
	 * @return array
	 */
	public function vt_item_meta_filter( $formatted_meta ) {
		$temp_metas = array();
		foreach ( $formatted_meta as $key => $meta ) {
			if ( isset( $meta->key ) && ! in_array( $meta->key, array( '_vtp_regular_price' ) ) ) {
				$temp_metas[ $key ] = $meta;
			}
		}
		return $temp_metas;
	}
	/**
	 * The set option is generated by appsbd.
	 */
	public function set_option() {
		parent::set_option();
		if ( ! empty( $this->options['is_rc_v3'] ) ) {
			$this->options['is_rc_v3'] = true;
		} else {
			$this->options['is_rc_v3'] = false;
		}
	}

	/**
	 * The post states is generated by appsbd
	 *
	 * @param mixed $post_states Its post_states param.
	 * @param mixed $post Its post param.
	 *
	 * @return mixed
	 */
	public function post_states( $post_states, $post ) {
		$post_link_page = $this->get_option( 'POS_link', '' );
		if ( 'page' == $post_link_page ) {
			$pos_page = $this->get_option( 'pos_page', '' );
			if ( $pos_page == $post->ID ) {
				$post_states['vitepos'] = '<i class="vt-pg-icon vps vps-vt-pos"></i>';
			}
		}
		return $post_states;

	}

	/**
	 * The increase sync value is generated by appsbd
	 */
	public static function increase_sync_value() {
		$last_sync_id = (int) get_option( '_vtp_ps_id', 0 );
		$last_sync_id++;
		update_option( '_vtp_ps_id', $last_sync_id ) || add_option( '_vtp_ps_id', $last_sync_id );
	}
	/**
	 * The wc force product sync is generated by appsbd
	 *
	 * @param int $post_id Its post id.
	 */
	public function wc_force_product_sync_id( $post_id ) {
		if ( in_array( $post_id, self::$_synced_product_ids ) ) {
			return;
		}
		self::$_synced_product_ids[] = $post_id;
		$wc_product                  = wc_get_product( $post_id );
		if ( ! empty( $wc_product ) ) {
			self::increase_sync_value();
		}
	}
	/**
	 * The wc force product sync is generated by appsbd
	 *
	 * @param int      $post_id Its post id.
	 * @param \WP_Post $post Its post object.
	 */
	public function wc_force_product_sync( $post_id, $post ) {
		$this->wc_force_product_sync_id( $post_id );
	}
	/**
	 * The wc force product sync is generated by appsbd
	 *
	 * @param int $post_id Its post id.
	 */
	public function wc_force_product_sync_meta( int $post_id ) {
		$this->wc_force_product_sync_id( $post_id );
	}

	/**
	 * The wc force product sync is generated by appsbd
	 */
	public function wc_option_update() {
		self::increase_sync_value();
	}
	/**
	 * The get current sync id is generated by appsbd
	 *
	 * @return false|mixed
	 */
	public static function get_current_sync_id() {
		return (int) get_option( '_vtp_ps_id', 0 );
	}
	/**
	 Handle a custom 'customvar' query var to get orders with the 'customvar' meta.
	 *
	 * @param array $query - Args for WP_Query.
	 * @param array $query_vars - Query vars from WC_Order_Query.
	 * @return array modified $query
	 */
	public function vt_meta_query_filter( $query, $query_vars ) {
		if ( ! empty( $query_vars['vt_meta_query'] ) ) {
			$query['meta_query'] = $query_vars['vt_meta_query'];
		}
		return $query;
	}

	/**
	 * The insert media attachment is generated by appsbd
	 *
	 * @param mixed $temp_file Its temp file path.
	 * @param mixed $filename Its filename.
	 * @param mixed $type Its file mine type.
	 * @param int   $parent_post_id Its parent post id.
	 *
	 * @return int|\WP_Error|null
	 */
	public function insert_media_attachment( $temp_file, $filename, $type, $parent_post_id = 0 ) {
		$upload_dir       = wp_upload_dir();
		$unique_file_name = wp_unique_filename( $upload_dir['path'], $filename );
		$filename         = basename( $unique_file_name );
		if ( wp_mkdir_p( $upload_dir['path'] ) ) {
			$file = $upload_dir['path'] . '/' . $filename;
		} else {
			$file = $upload_dir['basedir'] . '/' . $filename;
		}

		if ( move_uploaded_file( $temp_file, $file ) ) {
			$attachment = array(
				'post_mime_type' => $type,
				'post_title'     => sanitize_file_name( $filename ),
				'post_content'   => '',
				'post_status'    => 'inherit',
			);
			$attach_id  = wp_insert_attachment( $attachment, $file, $parent_post_id );
			if ( is_wp_error( $attach_id ) ) {
				return null;
			}
			require_once ABSPATH . 'wp-admin/includes/image.php';
			$attach_data = wp_generate_attachment_metadata( $attach_id, $file );
			wp_update_attachment_metadata( $attach_id, $attach_data );
			return $attach_id;
		}
		return null;
	}

	/**
	 * The save update product variation img is generated by appsbd
	 *
	 * @param mixed $variation_id Its variation_id param.
	 * @param mixed $v_index Its v_index param.
	 * @param mixed $product_id Its product_id param.
	 */
	public function save_update_product_variation_img( $variation_id, $v_index, $product_id ) {
		$files = AppInput::get_uploaded_files();
		if ( ! empty( $files['variations']['name'][ $v_index ]['image'] ) ) {
			if ( empty( $files['variations']['error'][ $v_index ]['image'] ) ) {
				$attach_id = $this->insert_media_attachment( $files['variations']['tmp_name'][ $v_index ]['image'], $files['variations']['name'][ $v_index ]['image'], $files['variations']['type'][ $v_index ]['image'], $variation_id );
				if ( ! empty( $attach_id ) ) {
					set_post_thumbnail( $variation_id, $attach_id );
									}
			}
		}
	}

	/**
	 * The save update product feature img is generated by appsbd
	 *
	 * @param int   $product_id Its product id.
	 * @param array $rm_gallery Its the attachment id array which has been removed.
	 */
	public function save_update_product_gallery_img( $product_id, $rm_gallery ) {
		$attachments = array();
		$files       = AppInput::get_uploaded_files();
		if ( ! empty( $files['images']['name'] ) ) {
			foreach ( $files['images']['name'] as $index => $filename ) {
				if ( empty( $files['images']['error'][ $index ] ) ) {
					$attach_id = $this->insert_media_attachment( $files['images']['tmp_name'][ $index ], $files['images']['name'][ $index ], $files['images']['type'][ $index ], $product_id );
					if ( ! empty( $attach_id ) ) {
						$attachments[] = $attach_id;
					}
				}
			}
		}
		$image_galleries = get_post_meta( $product_id, '_product_image_gallery', true );
		$image_array     = explode( ',', $image_galleries );
		$image_array     = array_filter(
			$image_array,
			function ( $item ) use ( $rm_gallery ) {
				if ( in_array( $item, $rm_gallery ) ) {
					return false;
				}
				return true;
			}
		);
		if ( ! empty( $attachments ) && count( $attachments ) > 0 ) {
			$image_array = array_merge( $image_array, $attachments );
		}
		$update_galleries = implode( ',', $image_array );
		if ( $update_galleries != $image_galleries ) {
			update_post_meta( $product_id, '_product_image_gallery', $update_galleries ) || add_post_meta( $product_id, '_product_image_gallery', $update_galleries );
		}
	}

	/**
	 * The save update product feature img is generated by appsbd
	 *
	 * @param int $product_id Its product id.
	 */
	public function save_update_product_feature_img( $product_id ) {
		$files = AppInput::get_uploaded_files();
		if ( ! empty( $files['feature_image']['name'] ) && empty( $files['feature_image']['error'] ) ) {
			$attach_id = $this->insert_media_attachment( $files['feature_image']['tmp_name'], $files['feature_image']['name'], $files['feature_image']['type'], $product_id );
			if ( ! empty( $attach_id ) ) {
				set_post_thumbnail( $product_id, $attach_id );
			}
		}

	}
	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		$this->add_ajax_action( 'invoice-settings', array( $this, 'update_invoice_settings' ) );
		$this->add_ajax_action( 'customers', array( $this, 'get_customers' ) );
		$this->add_ajax_action( 'refresh-app', array( $this, 'refresh_app' ) );
		add_filter( 'elite-pos/email-body-content', array( $this, 'email_body_content' ), 1 );
		add_action( 'template_redirect', array( $this, 'rewrite_templates' ), 1 );
		$this->add_pos_rewrite();
		add_filter( 'query_vars', array( $this, 'register_query_var' ) );
		add_action( 'woocommerce_admin_order_totals_after_total', array( $this, 'show_order_meta' ) );
		add_action(
			'woocommerce_admin_order_totals_after_tax',
			array( $this, 'woocommerce_admin_order_totals_after_tax' )
		);

		add_action( 'vitepos-client-header', array( $this, 'client_header' ) );
		add_action( 'vitepos-client-footer', array( $this, 'client_footer' ) );
		if ( $this->get_option( 'barcode_field', '' ) == 'CUS' ) {
			add_action( 'woocommerce_product_options_sku', array( $this, 'product_barcode_custom_field' ) );
			add_action( 'woocommerce_variation_options', array( $this, 'variation_barcode_custom_field' ), 10, 3 );

			add_action( 'woocommerce_process_product_meta', array( $this, 'save_product_barcode' ) );
			add_action( 'woocommerce_save_product_variation', array( $this, 'save_variation_barcode' ), 10, 2 );
		}
		add_filter( 'manage_edit-shop_order_columns', array( $this, 'vitepos_column_in_order_list' ), 20 );
		add_action( 'manage_shop_order_posts_custom_column', array( $this, 'vitepos_column_value_in_order_list' ), 20, 2 );

		add_action( 'save_post_product', array( $this, 'wc_force_product_sync' ), 10, 2 );
		add_action( 'after_delete_post', array( $this, 'wc_force_product_sync' ), 10, 2 );
		add_action( 'woocommerce_process_product_meta', array( $this, 'wc_force_product_sync_meta' ), 11 );
		add_action( 'woocommerce_save_product_variation', array( $this, 'wc_force_product_sync_meta' ), 11 );
		add_action( 'woocommerce_settings_saved', array( $this, 'wc_option_update' ), 11 );
				if ( is_admin() ) {
			add_action( 'show_user_profile', array( $this, 'add_user_fields' ) );
			add_action( 'user_new_form', array( $this, 'add_user_fields' ) );
			add_action( 'edit_user_profile', array( $this, 'add_user_fields' ) );

			add_action( 'personal_options_update', array( $this, 'save_user_fields' ) );
			add_action( 'user_register', array( $this, 'save_user_fields' ) );
			add_action( 'edit_user_profile_update', array( $this, 'save_user_fields' ) );
		}
		add_filter( 'woocommerce_order_item_get_formatted_meta_data', array( $this, 'vt_item_meta_filter' ), 10, 1 );
		add_action( 'apbd-vtpos/action/send-temp-password-email', array( $this, 'send_temp_password_email' ), 10, 2 );

		

	}

	/**
	 * The send temp password email is generated by appsbd
	 *
	 * @param \WP_User $user Its the instance of wp user.
	 * @param Strings  $new_password Its the new password.
	 */
	public function send_temp_password_email( $user, $new_password ) {
		ob_start();
		?>
		<p>Hi <?php echo esc_html( $user->first_name . ' ' . $user->last_name ); ?>,</p>
		<h4>Welcome to our <?php echo esc_html( get_bloginfo( 'name' ) ); ?></h4>
		<p>Your temporary password is : <strong><?php echo esc_html( $new_password ); ?></strong>,
			<br> Please use this in login, it may ask you to change password in first login
		</p>
		<p>Thank you</p>
		<?php
		$email_body = ob_get_clean();
		$headers    = array( 'Content-Type: text/html; charset=UTF-8' );
		wp_mail( $user->user_email, 'Your login information', $email_body, $headers );
	}
	/**
	 * The save user fields is generated by appsbd
	 *
	 * @param mixed $user_id Its user Id.
	 *
	 * @return false
	 */
	public function save_user_fields( $user_id ) {

		if ( ! current_user_can( 'edit_user', $user_id ) ) {
			return false;
		}
		$outlets = AppInput::post_value( 'outlets', array() );
		$outlets = array_filter(
			$outlets,
			function( $item ) {
				return ! empty( $item );
			}
		);
		if ( metadata_exists( 'user', $user_id, 'outlet_id' ) ) {
			update_user_meta( $user_id, 'outlet_id', $outlets );
		} else {
			add_user_meta( $user_id, 'outlet_id', $outlets );
		}

	}

	/**
	 * The get price format settigns is generated by appsbd
	 *
	 * @return array
	 */
	public function get_price_format_settigns() {
		$price_arg = array(
			'decimal_separator'  => wc_get_price_decimal_separator(),
			'thousand_separator' => wc_get_price_thousand_separator(),
			'decimals'           => wc_get_price_decimals(),
			'price_format'       => html_entity_decode(str_replace( array( '%1$s', '%2$s' ), array(  get_woocommerce_currency_symbol() , '{{amt}}' ), get_woocommerce_price_format() )),
		);
		return $price_arg;
	}
	/**
	 * The add user fields is generated by appsbd
	 *
	 * @param mixed $user Its user.
	 */
	public function add_user_fields( $user ) {
		?>
		<table class="form-table">
			<tr class="form-field">
				<th scope="row"><label for="dropdown"><?php $this->esc_e( 'VitePos Outlets' ); ?></label></th>
				<td>
					<?php
					$selected_outlets = array();
					if ( ! empty( $user->ID ) ) {
						$selected_outlets = get_user_meta( $user->ID, 'outlet_id', true );
					}
					?>
					<select name="outlets[]" id="user_select" multiple>
						<?php
						$outlets = Mapbd_pos_warehouse::find_all_by_key_value( 'status', 'A', 'id', 'name' );
						?>
						<option <?php echo ( empty( $selected_outlets ) ? esc_attr( 'selected' ) : '' ); ?> value=""><?php $this->esc_e( 'None' ); ?></option>
						<?php
						appsbd_get_select_options( $outlets, $selected_outlets );
						?>
					</select>
					<div class="description"><?php $this->esc_e( 'You can choose multiple outlets' ); ?></div>
				</td>
			</tr>
		</table>
		<?php
	}

	/**
	 * The vitepos column in order list is generated by appsbd
	 *
	 * @param array $columns Its column list.
	 *
	 * @return array
	 */
	public function vitepos_column_in_order_list( $columns ) {
		$reordered_columns = array();
				foreach ( $columns as $key => $column ) {
			$reordered_columns[ $key ] = $column;
			if ( 'order_status' == $key ) {
								$reordered_columns['is_vt_pos'] = '<i class="vps vps-vt-pos"></i>';
			}
		}
		return $reordered_columns;

	}

	/**
	 * The vitepos column value in order list is generated by appsbd
	 *
	 * @param mixed $column Its column id.
	 * @param mixed $post_id Its post id.
	 */
	public function vitepos_column_value_in_order_list( $column, $post_id ) {
		if ( 'is_vt_pos' == $column ) {
			$is_vitepos = get_post_meta( $post_id, '_is_vitepos', true );
			if ( ! empty( $is_vitepos ) && 'Y' == $is_vitepos ) {
				?>
				<span data-app-title="<?php $this->esc_e( 'Order processed by vitepos.' ); ?>">
					<?php $this->esc_e( 'Yes' ); ?>
				</span>
				<?php
			} else {
				$this->esc_e( '-' );
			}
		}
	}
			/**
			 * The get barcode input args is generated by appsbd
			 *
			 * @return array
			 */
	public function get_barcode_input_args() {
		return array(
			'id'          => '_vt_barcode',
			'desc_tip'    => true,
			'class'       => 'short',
			'description' => $this->__( 'It is custom barcode data of woocommerce for vitepos' ),
			'label'       => $this->__( 'Barcode Value' ),
		);
	}

	/**
	 * The product barcode custom field is generated by appsbd
	 */
	public function product_barcode_custom_field() {
		$args = $this->get_barcode_input_args();
		woocommerce_wp_text_input( $args );
	}

	/**
	 * The variation barcode custom field is generated by appsbd
	 *
	 * @param mixed $loop Its loop param.
	 * @param mixed $variation_data Its variation_data param.
	 * @param mixed $variation Its variation param.
	 */
	public function variation_barcode_custom_field( $loop, $variation_data, $variation ) {
		$args          = $this->get_barcode_input_args();
		$args['id']    = '_vt_barcode[' . $loop . ']';
		$args['value'] = get_post_meta( $variation->ID, '_vt_barcode', true );
		woocommerce_wp_text_input( $args );
	}

	/**
	 * The save product barcode is generated by appsbd
	 *
	 * @param mixed $post_id Its post_id param.
	 */
	public function save_product_barcode( $post_id ) {
		$product = wc_get_product( $post_id );
		$barcode = AppInput::post_value( '_vt_barcode', '' );
		$product->update_meta_data( '_vt_barcode', $barcode );
		$product->save();
	}

	/**
	 * The save variation barcode is generated by appsbd
	 *
	 * @param mixed $variation_id Its variation_id param.
	 * @param mixed $i Its i param.
	 */
	public function save_variation_barcode( $variation_id, $i ) {
		$barcode_array = AppInput::post_value( '_vt_barcode', array() );
		$barcdoe       = ! empty( $barcode_array[ $i ] ) ? $barcode_array[ $i ] : '';
		update_post_meta( $variation_id, '_vt_barcode', esc_attr( $barcdoe ) ) || add_post_meta( $variation_id, '_vt_barcode', esc_attr( $barcdoe ) );
	}
	/**
	 * The getSettings is generated by appsbd
	 *
	 * @param string $type Its string.
	 *
	 * @return \stdClass Its stdclass.
	 */
	public static function get_settings( $type = '' ) {
		$settings       = new \stdClass();
		$basic_settings = self::get_module_option();
		if ( empty( $basic_settings['barcode_field'] ) ) {
			$basic_settings['barcode_field'] = 'ID';
		}
		$basic_settings['currency_symbol'] = get_woocommerce_currency_symbol();
		$basic_settings['currency_code']   = get_woocommerce_currency();

		if ( isset( $basic_settings['POS_link'] ) ) {
			unset( $basic_settings['POS_link'] );
		}
		if ( ! isset( $basic_settings['login_type'] ) ) {
			$basic_settings['login_type'] = '';
		}
		if ( ! isset( $basic_settings['pos_link'] ) ) {
			$basic_settings['pos_link'] = '';
		}
		if ( ! empty( $basic_settings['login_type'] ) ) {
			$basic_settings['login_type'] = strtoupper( $basic_settings['login_type'] );
			if ( 'W' == $basic_settings['login_type'] ) {
				$basic_settings['pos_link'] = self::get_module_instance()->get_pos_link();
			}
		}

		if ( isset( $basic_settings['wp_login_url'] ) ) {
			unset( $basic_settings['wp_login_url'] );
		}
		if ( isset( $basic_settings['pos_page'] ) ) {
			unset( $basic_settings['pos_page'] );
		}
		if ( isset( $basic_settings['pos_color'] ) ) {
			unset( $basic_settings['pos_color'] );
		}
		if ( isset( $basic_settings['rc_v3_secret_key'] ) ) {
			unset( $basic_settings['rc_v3_secret_key'] );
		}
		$settings->basic_settings = $basic_settings;
		$settings->inv_settings   = Invoice_Settings::get_settings();

		return $settings;
	}

	/**
	 * The get countries is generated by appsbd
	 *
	 * @param bool $is_with_states Its is_with_states param.
	 *
	 * @return array
	 */
	public function get_countries( $is_with_states = false ) {
		$countries_obj      = new \WC_Countries();
		$countries          = $countries_obj->__get( 'countries' );
		$response_countries = array();
		foreach ( $countries as $code => $country ) {
			$country_object                    = new \stdClass();
			$country_object->name              = $country;
			$country_object->code              = $code;
			$country_object->nationality_title = $country;
			if ( $is_with_states ) {
				$states = $countries_obj->get_states( $code );
				if ( ! empty( $states ) ) {
					foreach ( $states as $state_id => $state ) {
						$state_obj                = new \stdClass();
						$state_obj->id            = $state_id;
						$state_obj->name          = $state;
						$country_object->states[] = $state_obj;
					}
				}
			}
			$response_countries[] = $country_object;
		}
		return $response_countries;
	}
	/**
	 * The check captcha is generated by appsbd
	 *
	 * @param array $payload Its the payload param.
	 *
	 * @return bool
	 */
	public static function check_captcha( $payload ) {
		$is_enable_rc = self::get_module_option( 'is_rc_v3', false );
		if ( ! empty( $is_enable_rc ) ) {
			$token         = ! empty( $payload['g_token'] ) ? $payload['g_token'] : '';
			$rc_secret_key = self::get_module_option( 'rc_v3_secret_key', false );
			if ( ! empty( $token ) && Recaptcha::is_valid( $token, $rc_secret_key ) ) {
				return true;
			} else {
				self::get_module_instance()->add_error( 'Captcha error, please try again' );
				return false;
			}
		} else {
			return true;
		}
	}
	/**
	 * The get timezone is generated by appsbd
	 */
	public function get_timezone() {
		$tz_list = \DateTimeZone::listIdentifiers( \DateTimeZone::ALL );
		return $tz_list;
	}

	/**
	 * The get admin settings is generated by appsbd
	 *
	 * @return array
	 */
	public function get_admin_settings() {
		$options = array();
		if ( empty( $this->options['barcode_field'] ) ) {
			$this->options['barcode_field'] = 'ID';
		}
		if ( empty( $this->options['new_badge_duration'] ) ) {
			$this->options['new_badge_duration'] = 15;
		}
		if ( ! isset( $this->options['pos_row_col'] ) ) {
			$this->options['pos_row_col'] = '';
		}

		$options['basic_settings']   = $this->options;
		$options['pages']            = $this->get_page_list();
		$options['pos_link']         = site_url( 'vitepos' );
		$options['pos_login_ph']     = wp_login_url();
		$options['inv_settings']     = Invoice_Settings::get_settings();
		$options['pos_customer_obj'] = null;
		if ( ! empty( $this->options['pos_customer'] ) ) {
			$user = get_user_by( 'id', $this->options['pos_customer'] );
			if ( ! empty( $user->ID ) ) {
				$return_user                 = new \stdClass();
				$return_user->id             = $user->ID;
				$return_user->name           = ! empty( $user->first_name ) ? $user->first_name . ' ' . $user->last_name : $user->user_nicename;
				$options['pos_customer_obj'] = $return_user;
			}
		}

		/**
		 * Its for payment method
		 *
		 * @since 1.0
		 */
		$options['license_info'] = apply_filters( 'vitepos/filter/get-license-info', null );
		if ( ! empty( $options['license_info']->license_key ) ) {
			$options['license_info']->license_key = substr( $options['license_info']->license_key, 0, 4 ) . '-XXXX-XXXX-' . substr( $options['license_info']->license_key, -4 );
		}

		return $options;
	}

	/**
	 * The get page list is generated by appsbd
	 *
	 * @return array
	 */
	public function get_page_list() {
		$args         = array(
			'sort_order'  => 'asc',
			'sort_column' => 'post_title',
			'post_type'   => 'page',
			'post_status' => 'publish',
		);
		$pages        = get_pages( $args );
		$return_pages = array();
		foreach ( $pages as $page ) {
			$return_pages[ (int) $page->ID ] = $page->post_title;
		}
		return $return_pages;
	}

	/**
	 * The get admin settings is generated by appsbd
	 */
	public function get_admin_options() {
		$response = new Ajax_Confirm_Response();
		$response->display_with_response( true, $this->get_admin_settings() );
	}
	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function refresh_app() {
		$response = new Ajax_Confirm_Response();
		foreach ( $this->kernel_object->module_list as $module_object ) {
			$module_object->on_table_create();
			$module_object->on_active();
		}
		$this->do_version_update( $this->kernel_object->plugin_version, $this->kernel_object->plugin_version, true );
		$this->add_info( 'Successfully refreshed' );
		$response->display_with_response( true );
	}
	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function update_invoice_settings() {
		$response = new Ajax_Confirm_Response();
		$app_data = AppInput::get_posted_data();
		if ( Invoice_Settings::save_settings( $app_data ) ) {
			$this->add_info( 'Successfully updated' );
			$response->display_with_response(
				true,
				$this->get_admin_settings()
			);
		} else {
			$this->add_error( 'No change for update' );
			$response->display_with_response(
				false,
				$this->get_admin_settings()
			);
		}
	}
	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function get_customers() {
		$response      = new Ajax_Confirm_Response();
		$src_props     = AppInput::get_value( 'searchKey', '' );
		$response_user = array();
		$args          = array(
			'count_total' => true,
		);
		POS_Customer::set_search_param( $src_props, $args );
		$args        = wp_parse_args( $args );
		$user_search = new \WP_User_Query( $args );
		$users       = $user_search->get_results();
		foreach ( $users as $user ) {
			$customer_obj       = new \stdClass();
			$customer_obj->id   = $user->ID;
			$customer_obj->name = $user->first_name ? $user->first_name . ' ' . $user->last_name : $user->user_nicename;
			$response_user[]    = $customer_obj;
		}
		return $response->display_with_response( true, $response_user );
	}

	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function ajax_request_callback() {
		$response    = new Ajax_Confirm_Response();
		$before_save = $this->options;
		$is_updated  = $this->update_request_option();
		if ( $is_updated && ( $before_save['barcode_field'] != $this->options['barcode_field'] ) ) {
			self::increase_sync_value();
		}
		$response->display_with_response( $is_updated, $this->get_admin_settings() );
	}

	/**
	 * The get customer object by id is generated by appsbd
	 *
	 * @param any $id Its integer.
	 *
	 * @return \stdClass|null Its null.
	 */
	public static function get_customer_object_by_id( $id ) {
		$user = get_user_by( 'ID', $id );
		if ( ! empty( $user ) ) {
			$customer_obj             = new \stdClass();
			$customer_obj->id         = $user->ID;
			$customer_obj->first_name = $user->first_name;
			$customer_obj->last_name  = $user->last_name;
			$customer_obj->username   = $user->user_nicename;
			$customer_obj->email      = $user->user_email;
			$customer_obj->city       = $user->billing_city;
						$customer_obj->contact_no = $user->billing_phone;
			$customer_obj->street     = $user->billing_address_1;
			$customer_obj->country    = $user->billing_country;
			$customer_obj->postcode   = $user->billing_postcode;

			return $customer_obj;
		}

		return null;
	}

	/**
	 * The is admin user is generated by appsbd
	 *
	 * @param null $user Its wp_user object.
	 *
	 * @return bool
	 */
	public static function is_admin_user( $user = null ) {
		if ( empty( $user ) ) {
			$user = wp_get_current_user();
		}
		if ( $user instanceof \WP_User ) {
			if ( empty( $user ) || empty( $user->roles ) ) {
				return false;
			}
			if ( in_array( 'administrator', $user->roles ) ) {
				return true;
			}
		}
		return false;
	}

	/**
	 * The check the user is pos or not by appsbd
	 *
	 * @param \WP_User $user Its user param.
	 *
	 * @return bool
	 */
	public static function is_pos_user( $user = null ) {
		if ( empty( $user ) ) {
			$user = wp_get_current_user();
		}
		if ( $user instanceof \WP_User ) {
			if ( empty( $user ) || empty( $user->roles ) ) {
				return false;
			}
			if ( in_array( 'administrator', $user->roles ) ) {
				return true;
			}
			$pos_roles = Mapbd_Pos_Role::get_role_list( 'status', 'A' );
			foreach ( $pos_roles as $agent_role ) {
				if ( in_array( $agent_role->slug, $user->roles ) ) {
					return true;
				}
			}
		}
		return false;
	}
	/**
	 * The add pos rewrite is generated by appsbd
	 */
	public function add_pos_rewrite() {
		$asset_base = str_replace( site_url(), '', plugins_url( '', $this->plugin_file ) );
		add_rewrite_rule( '([^/]*)/vt_sw[^/]*', 'index.php?vitepos_sw=true', 'top' );
				add_rewrite_rule( '([^/]*)/apbd_vt_manifest\.js', 'index.php?vitepos_mf=true', 'top' );
		add_rewrite_rule( '^vitepos/?$', 'index.php?vitepos=true', 'top' );

		if ( true || get_transient( 'viteposactivate' ) ) {
			flush_rewrite_rules( true );
			delete_transient( 'viteposactivate' );
		}
	}

	/**
	 *
	 * The register query var is generated by appsbd
	 *
	 * @param any $vars Its string.
	 *
	 * @return mixed Its string.
	 */
	public function register_query_var( $vars ) {
		$vars[] = 'vitepos';
		$vars[] = 'vitepos_sw';
		$vars[] = 'vitepos_wb';
		$vars[] = 'vitepos_mf';

		return $vars;
	}

	/**
	 * The rewrite templates is generated by appsbd
	 */
	public function rewrite_templates() {
		if ( wp_validate_boolean( get_query_var( 'vitepos_sw' ) ) ) {
			header( 'Content-Type: application/javascript' );
			readfile( dirname( $this->plugin_file ) . '/templates/pos-assets/service-worker.js' );
			exit;
		}
		if ( wp_validate_boolean( get_query_var( 'vitepos_wb' ) ) ) {
			header( 'Content-Type: application/javascript' );
			readfile( dirname( $this->plugin_file ) . '/templates/pos-assets/workbox-79ffe3e0.js' );
			exit;
		}
		if ( wp_validate_boolean( get_query_var( 'vitepos_mf' ) ) ) {
			$this->print_manifest();
			exit;
		}
		if ( wp_validate_boolean( get_query_var( 'vitepos' ) ) ) {
			$post_link_page = $this->get_option( 'POS_link', '' );
			if ( empty( $post_link_page ) ) {
				$this->load_pos_client();
			} else {
				if ( is_user_logged_in() ) {
					if ( 'page' == $post_link_page ) {
						$pos_page = $this->get_option( 'pos_page', '' );
						wp_redirect( get_permalink( $pos_page ) );
						exit;
					}
				}
			}
		} else {
			$post_link_page = $this->get_option( 'POS_link', '' );
			if ( 'page' == $post_link_page ) {
				$pos_page = $this->get_option( 'pos_page', '' );
				if ( is_page( $pos_page ) ) {

					$this->load_pos_client();
				}
			}
		}
	}

	/**
	 * The get wp login url, its for only default login.
	 *
	 * @param string $redirect_to Its redirect to url.
	 *
	 * @return array|mixed|string
	 */
	public function get_wp_pos_login_url( $redirect_to = '' ) {
		$pos_login_page = strtoupper( $this->get_option( 'login_type', '' ) );
		if ( 'W' == $pos_login_page ) {
			$login_url = $this->get_option( 'wp_login_url', '' );
			if ( ! empty( $login_url ) ) {
				return $login_url;
			}
		}
		return wp_login_url( $redirect_to );
	}

	/**
	 * The get manifest link is generated by appsbd
	 *
	 * @return string
	 */
	public function get_manifest_link() {
		return $this->get_pos_link( false ) . '/apbd_vt_manifest.js';
	}

	/**
	 * The get sw link is generated by appsbd
	 *
	 * @return string
	 */
	public function get_sw_link() {
		return $this->get_plugin_url( 'templates/pos-assets/service-worker.js' );
			}
	/**
	 * The get pos link is generated by appsbd
	 *
	 * @param bool $is_only_wp_type Its only_wp_type.
	 *
	 * @return false|string|\WP_Error
	 */
	public function get_pos_link( $is_only_wp_type = false ) {
		if ( $is_only_wp_type ) {
			$pos_login_page = strtoupper( $this->get_option( 'login_type', '' ) );
			if ( 'W' != $pos_login_page ) {
				return '';
			}
		}
		$post_link_page = $this->get_option( 'POS_link', '' );
		if ( empty( $post_link_page ) ) {
			return site_url( 'vitepos' );
		} else {
			$pos_page = $this->get_option( 'pos_page', '' );
			$url      = get_permalink( $pos_page );
			if ( ! is_wp_error( $url ) ) {
				return $url;
			} else {
				return site_url();
			}
		}
	}

	/**
	 * The load pos client is generated by appsbd
	 */
	public function load_pos_client() {
		if ( is_user_logged_in() ) {
			if ( ! self::is_pos_user() ) {
				wp_logout();
				$post_link_page = $this->get_option( 'POS_link', '' );
				if ( 'page' == $post_link_page ) {
					include_once plugin_dir_path( $this->plugin_file ) . '/templates/unauthorize.php';
					exit;
				}
			}
		} else {
			$pos_login_page = strtoupper( $this->get_option( 'login_type', '' ) );
			if ( 'W' == $pos_login_page ) {
				$login_url = $this->get_option( 'wp_login_url', '' );
				if ( ! empty( $login_url ) ) {
					$login_url = add_query_arg( 'redirect_to', urlencode( $this->get_pos_link() ), $login_url );
					wp_redirect( $login_url );
					exit;
				}
				wp_redirect( wp_login_url( $this->get_pos_link() ) );
				exit;
			}
		}
		if ( AppInput::get_value( '_vtf' ) == 'manifest' ) {
			$this->print_manifest();
			exit;
		}
		if ( AppInput::get_value( '_vtf' ) == 'sw' ) {
			header( 'Content-Type: application/javascript' );
			readfile( dirname( $this->plugin_file ) . '/templates/pos-assets/service-worker.js' );
			exit;
		}
				include_once plugin_dir_path( $this->plugin_file ) . '/templates/pos.php';

		exit;
	}

	/**
	 * The get pos color code is generated by appsbd
	 *
	 * @return string
	 */
	public function get_pos_color_code() {
		$pos_color = $this->get_option( 'pos_color', 'def' );
		if ( empty( $pos_color ) ) {
			$pos_color = 'def';
		} else {
			$pos_color = strtolower( $pos_color );
		}
		$skins = array(
			'def'    => '#2563EB',
			'cyan'   => '#00ACC1',
			'green'  => '#4CAF50',
			'purple' => '#7B1FA2',
			'pink'   => '#F06292',
			'red'    => '#b63431',
			'orange' => '#F57C00',
			'gray'   => '#757575',
			'dark'   => '#000000',
		);
		return isset( $skins[ $pos_color ] ) ? $skins[ $pos_color ] : '#ffffff';
	}
	/**
	 * The print manifest is generated by appsbd
	 */
	public function print_manifest() {
		$manifest = new Manifest();
		$manifest->set_name( 'vitepos', 'vitepos' );
		$manifest->set_theme_color( $this->get_pos_color_code() );
		$manifest->set_display( 'standalone' );
		$manifest->add_icon( self::get_module_instance()->get_favicon(), '256x256', 'image/png' );
		$manifest->set_start_url( $this->get_pos_link() );
				$manifest->set_prop( 'kiosk_enabled', true );
		$manifest->set_prop( 'kiosk_only', true );
		
		$manifest->set_prop( '$schema', 'https://json.schemastore.org/web-manifest-combined.json' );
		wp_send_json( $manifest );
	}
	/**
	 * The option form is generated by appsbd
	 */
	public function option_form() {
		$this->set_title( 'Settings' );

		$this->display();
	}

	/**
	 * The get menu title is generated by appsbd
	 *
	 * @return mixed Its mixed
	 */
	public function get_menu_title() {
		return $this->__( 'Settings' );
	}

	/**
	 * The get menu sub title is generated by appsbd
	 *
	 * @return mixed Its mixed.
	 */
	public function get_menu_sub_title() {
		return $this->__( 'View All Settings' );
	}

	/**
	 * The get menu icon is generated by appsbd
	 *
	 * @return string Its string.
	 */
	public function get_menu_icon() {
		return 'fa fa-cog';
	}

	/**
	 * The on active is generated by appsbd
	 */
	public function on_active() {
		parent::on_active(); 
		Mapbd_pos_purchase::create_db_table();
		Mapbd_pos_purchase_item::create_db_table();
		Mapbd_pos_vendor::create_db_table();
		Mapbd_pos_warehouse::create_db_table();
		Mapbd_pos_counter::create_db_table();
		Mapbd_Pos_Cash_Drawer::create_db_table();
		Mapbd_Pos_Cash_Drawer_Log::create_db_table();
		Mapbd_Pos_Cash_Drawer_Types::create_db_table();
		set_transient( 'viteposactivate', 1 );
	}

	/**
	 * The email body content is generated by appsbd
	 *
	 * @param any $content Its string.
	 *
	 * @return string Its string.
	 */
	public function email_body_content( $content ) {
		if ( empty( $content ) ) {
			$content = 'Dear {{customer name}}';
		}

		return $content;
	}

	/**
	 * The client header is generated by appsbd
	 */
	public function client_header() {
		$pos_color = $this->get_option( 'pos_color', 'def' );
		if ( empty( $pos_color ) || 'def' == $pos_color ) {
			$pos_color = 'default';
		} else {
			$pos_color = strtolower( $pos_color );
		}
		$links = array(
			array(
				'href' => $this->get_plugin_url( 'assets/font.css?v='.$this->kernel_object->plugin_version ),
				'rel'  => 'stylesheet',
			),
			array(
				'href' => $this->get_plugin_url( 'templates/pos-assets/css/color-' . $pos_color . '.css?v='.$this->kernel_object->plugin_version ),
				'rel'  => 'stylesheet',
			),
			array(
				'href' => $this->get_plugin_url( 'templates/pos-assets/css/vitepos.css?v='.$this->kernel_object->plugin_version ),
				'rel'  => 'preload',
				'as'   => 'style',
			),
			array(
				'href' => $this->get_plugin_url( 'templates/pos-assets/js/vitepos.js?v='.$this->kernel_object->plugin_version ),
				'rel'  => 'preload',
				'as'   => 'script',
			),
			array(
				'href' => $this->get_plugin_url( 'templates/pos-assets/css/vitepos.css?v='.$this->kernel_object->plugin_version ),
				'rel'  => 'stylesheet',
			),
		);
		foreach ( $links as $link ) {
			call_user_func( 'printf', '<link %s>', $this->array_attrs( $link ) );
		}
	}

	/**
	 * The get pos language is generated by appsbd
	 */
	public function get_pos_language() {
		echo json_encode( Client_Language::get_pos_languages( $this->kernel_object ) );
	}
	/**
	 * The client header is generated by appsbd
	 */
	public function client_footer() {
		$links = array(
			array(
				'src' => $this->get_plugin_url( 'templates/pos-assets/js/vitepos.js?v='.$this->kernel_object->plugin_version ),
			),
		);
		foreach ( $links as $link ) {
			call_user_func( 'printf', '<script %s></script>', $this->array_attrs( $link ) );
		}
	}

	/**
	 * The array attrs is generated by appsbd
	 *
	 * @param mixed $arr_data its array to html attr.
	 *
	 * @return string
	 */
	public function array_attrs( $arr_data ) {
		$attr_return = '';
		foreach ( $arr_data as $attr => $val ) {
			$attr_return .= $attr . '="' . $val . '" ';
		}

		return $attr_return;
	}

	/**
	 * The woocommerce admin order totals after tax is generated by appsbd
	 *
	 * @param any $order_id Its string.
	 */
	public function woocommerce_admin_order_totals_after_tax( $order_id ) {
		$order        = wc_get_order( $order_id );
		$is_vite_post = $order->get_meta( '_is_vitepos' ) == 'Y';
		if ( $is_vite_post ) {
			if ( $order->get_total_fees() < 0 ) {
				?>
				<tr>
					<td class="label">
						<?php $this->esc_e( 'Discount' ); ?>
						<small><i><?php $this->esc_e( '(Fee - Discount)' ); ?></i></small>:
					</td>
					<td width="1%"></td>
					<td class="total">
						<?php
						$fee = round( $order->get_total_fees(), wc_get_price_decimals(), PHP_ROUND_HALF_DOWN );
						echo wp_kses_post(
							wc_price(
								$fee,
								array( 'currency' => $order->get_currency() )
							)
						);
						?>
					</td>
				</tr>


				<?php
			}
			$rounding = (float) $order->get_meta( '_vtp_miss_total' );
			if ( 0.0 != $rounding ) {
				?>
				<tr>
					<td class="label"><?php $this->esc_attr_e( 'Calculation Rounding Factor' ); ?></td>
					<td width="1%"></td>
					<td class="total">
						<?php
						wp_kses_post( wc_price( $rounding, array( 'currency' => $order->get_currency() ) ) );
						?>
					</td>
				</tr>
				<?php
			}
		}
	}

	/**
	 * The show order meta is generated by appsbd
	 *
	 * @param any $order_id Its string.
	 */
	public function show_order_meta( $order_id ) {
		$order        = wc_get_order( $order_id );
		$is_vite_post = $order->get_meta( '_is_vitepos' ) == 'Y';
		if ( $is_vite_post ) {
			?>
			<tr>
				<td colspan="3" class="label label-highlight"> <i class="vps vps-vt-pos vtp-order-dtls-icon"></i> <?php $this->esc_e( 'Information' ); ?></td>
			</tr>
			<tr>
				<td colspan="3" class="vtp-order-tr-line"></td>
			</tr>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Cash tendered amount' ); ?>:
				</td>
				<td width="1%"></td>
				<td>
					<?php
					echo wp_kses_post(
						wc_price(
							$order->get_meta( '_vtp_tendered_amount' ),
							array( 'currency' => $order->get_currency() )
						)
					);
					?>


				</td>
			</tr>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Change amount' ); ?>:
				</td>
				<td width="1%"></td>
				<td>
					<?php
					echo wp_kses_post(
						wc_price(
							$order->get_meta( '_vtp_change_amount' ),
							array( 'currency' => $order->get_currency() )
						)
					);
					?>
				</td>
			</tr>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Order Note' ); ?>:
				</td>
				<td width="1%"></td>
				<td>
					<?php echo esc_html( $order->get_meta( '_vtp_order_note' ) ); ?>
				</td>
			</tr>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Payment Method(s)' ); ?>:
				</td>
				<td width="1%"></td>
				<td> </td>
			</tr>
			<?php
			$methods = array(
				'C' => $this->__( 'Cash' ),
				'S' => $this->__( 'Swipe Machine' ),
				'O' => $this->__( 'Others' ),
			);
			/**
			 * Its for payment method
			 *
			 * @since 1.0
			 */
			$methods         = apply_filters( 'apbd-vitepos/filter/payment-methods', $methods );
			$payment_methods = $order->get_meta( '_vtp_payment_list', true );
			if ( ! empty( $payment_methods ) && count( $payment_methods ) > 0 ) {
				?>
			<tr>
				<td colspan="3" class="vtp-order-tr-line"></td>
			</tr>
				<?php
				foreach ( $payment_methods as $payment_method ) {
					?>
					<tr>
						<td class="">
							<div class="label label-highlight">
							<?php
							$payment_type = ! empty( $payment_method['type'] ) ? $payment_method['type'] : 'U';
							echo esc_html( ! empty( $methods[ $payment_type ] ) ? $methods[ $payment_type ] : $this->__( 'Unknown' ) );
							?>
							 :
							</div>
							<small>
								<i>
								<?php
								if ( 'S' == $payment_type && ! empty( $payment_method['card_info'] ) ) {
									echo esc_html( 'xxxx-xxxx-xxxx-' . $payment_method['card_info'] );
								} elseif ( ! empty( $payment_method['payment_note'] ) ) {
									echo esc_html( $payment_method['payment_note'] );
								}
								?>
								</i>
							</small>
						</td>
						<td width="1%"></td>
						<td valign="top">
							<?php
							echo wp_kses_post( wc_price( $payment_method['amount'], array( 'currency' => $order->get_currency() ) ) );
							?>
						</td>
					</tr>
					<?php
				}
				?>
				<tr>
					<td colspan="3" class="vtp-order-tr-line"></td>
				</tr>
			 <?php } ?>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Outlet' ); ?>:
				</td>
				<td width="1%"></td>
				<td>
					<?php
					$outlet_id  = $order->get_meta( '_vtp_outlet_id', true );
					$counter_id = $order->get_meta( '_vtp_counter_id', true );
					if ( ! empty( $outlet_id ) ) {
						$outlet_info = Mapbd_Pos_Warehouse::find_by( 'id', $outlet_id );
						if ( ! empty( $outlet_info ) ) {
							echo esc_html( $outlet_info->name );
						}
					}
					if ( ! empty( $counter_id ) ) {
						$counter_info = Mapbd_pos_counter::find_by( 'id', $counter_id, array( 'outlet_id' => $outlet_id ) );
						if ( ! empty( $counter_info ) ) {
							echo esc_html( ', ' . $counter_info->name );
						}
					}
					?>
				</td>
			</tr>
			<tr>
				<td class="label label-highlight">
					<?php $this->esc_attr_e( 'Processed by' ); ?>:
				</td>
				<td width="1%"></td>
				<td>
					<?php
					$processed_user_id = $order->get_meta( '_vtp_processed_by', true );
					if ( ! empty( $processed_user_id ) ) {
						$processed_by = get_user_by( 'id', $processed_user_id );
						if ( ! empty( $processed_by ) ) {
							echo esc_html( appsbd_get_user_title_by_user( $processed_by ) );
						}
					}
					?>
				</td>
			</tr>
			<?php
			$offline_id = $order->get_meta( '_vtp_offline_id', true );
			if ( ! empty( $offline_id ) ) {
								$offline_date   = $order->get_meta( '_vtp_offline_process_date', true );
				$offline_date   = gmdate( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ), strtotime( $offline_date ) );
				$synced_user_id = $order->get_meta( '_vtp_offline_synced_by', true );
				$synced_by      = '';
				if ( ! empty( $synced_user_id ) ) {
					$synced_user = get_user_by( 'id', $processed_user_id );
					if ( ! empty( $synced_user ) ) {
						$synced_by = appsbd_get_user_title_by_user( $synced_user );
					}
				}
				?>
				<tr>
					<td colspan="3"> &nbsp;</td>
				</tr>
				<tr class="label label-highlight" align="right">
					<td colspan="3"> <?php $this->esc_e( 'Its offline order, details given below' ); ?></td>
				</tr>
				<tr>
					<td colspan="3" class="vtp-order-tr-line"></td>
				</tr>
				<tr>
					<td class="">
						<div class="label label-highlight">
							<?php $this->esc_e( 'Offline ID' ); ?>:
						</div>
					</td>
					<td width="1%"></td>
					<td valign="top">
						<?php
						echo esc_html( $offline_id );
						?>
					</td>
				</tr>
				<tr>
					<td class="">
						<div class="label label-highlight">
							<?php $this->esc_e( 'Offline Order Time' ); ?>:
						</div>
					</td>
					<td width="1%"></td>
					<td valign="top">
						<?php
						echo esc_html( $offline_date );
						?>
					</td>
				</tr>
				<tr>
					<td class="">
						<div class="label label-highlight">
							<?php $this->esc_e( 'Synced By' ); ?>:
						</div>
					</td>
					<td width="1%"></td>
					<td valign="top">
						<?php
						echo esc_html( $synced_by );
						?>
					</td>
				</tr>
				<?php
			}

			?>
			<tr>
				<td colspan="3" class="vtp-order-tr-line"></td>
			</tr>
			<tr>
				<td colspan="3" class="label label-highlight" align="right">
					<?php $this->esc_e( 'This order  processed form' ); ?>
					<i class="vps vps-vt-pos vtp-order-dtls-icon"></i>.
					<?php $this->esc_e( 'Thank you' ); ?>
				</td>
			</tr>
			<?php
		}
	}

}
