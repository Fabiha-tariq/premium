<?php
/**
 * It helper of current plugin.
 *
 * @package  vitepos
 */

/**
 * Its base helper
 */

use Automattic\WooCommerce\Utilities\NumberUtil;

require_once dirname( __FILE__ ) . '/../../appsbd/v1/helper/base-helper.php';

if ( ! function_exists( 'vitepos_get_users' ) ) {
	/**
	 * The vitepos get users is generated by appsbd
	 *
	 * @param array $args Its argument array.
	 *
	 * @return stdClass
	 */
	function vitepos_get_users( $args = array() ) {
		$args                = wp_parse_args( $args );
		$args['count_total'] = false;

		$user_search = new WP_User_Query( $args );

		$resp       = new stdClass();
		$resp->rows = (array) $user_search->get_results();
		unset( $args['count_total'] );
		$user_search_total = new WP_User_Query( $args );
		$resp->total       = $user_search_total->get_total();
		return $resp;
	}
}
if ( ! function_exists( 'vitepos_load_assets' ) ) {
	/**
	 * The vitepos load assets is generated by appsbd
	 *
	 * @return string
	 */
	function vitepos_load_assets() {
		$svg_icons = appsbd_load_svg_icons( dirname( __FILE__ ) . '/../../assets-global/fonts/vps.svg' );
		return vitepos_get_assets_id( $svg_icons );
	};
}
if ( ! function_exists( 'vitepos_order_add_fee_on_order' ) ) {
	/**
	 * The vitepos order add fee on order is generated by appsbd
	 *
	 * @param any   $order Its order param.
	 * @param any   $title Its title param.
	 * @param any   $amount Its amount param.
	 * @param array $metas Its metas param.
	 */
	function vitepos_order_add_fee_on_order( &$order, $title, $amount, $metas = array() ) {
		$item_fee = new WC_Order_Item_Fee();
		$item_fee->set_name( $title ); 		$item_fee->set_tax_class( '' );
		$item_fee->set_tax_status( 'none' );
		$item_fee->set_total( $amount ); 		foreach ( $metas as $meta_key => $m_value ) {
			$item_fee->add_meta_data( $meta_key, $m_value, true );
		}
		$order->add_item( $item_fee );
	}
}
if ( ! function_exists( 'vitepos_order_add_tax' ) ) {
	/**
	 * The vitepos order add tax is generated by appsbd
	 *
	 * @param any $order Its order param.
	 * @param any $title Its title param.
	 * @param any $amount Its amount param.
	 */
	function vitepos_order_add_tax( &$order, $title, $amount ) {
		$item = new WC_Order_Item_Tax();
		$item->set_name( $title ); 		$item->set_tax_total( $amount );
		$item->set_order_id( $order->get_id() );
		$order->add_item( $item );
	}
}
//bugs 
if(!class_exists("_vtpos_css_handler")) {
	class __vtpos_css_handler {
		public $key = "B472FEB04CCEC9DC";
		private $product_id = "11";
		private $product_base = "apbd-vite-pos";
		private $server_host = "https://applic.appsbd.com/wp-json/cildbsppa/";
		private $hasCheckUpdate=true;
		private $isEncryptUpdate=true;
		private $pluginFile;
		private static $selfobj=null;
		private $version="";
		private $isTheme=false;
		private $emailAddress = "";
		private static $_onDeleteLicense=[];
		function __construct($plugin_base_file='')
		{
			$this->pluginFile=$plugin_base_file;
			$dir=dirname($plugin_base_file);
			$dir=str_replace('\\','/',$dir);
			if(strpos($dir,'wp-content/themes')!==FALSE){
				$this->isTheme=true;
			}
			$this->version=$this->getCurrentVersion();
			if($this->hasCheckUpdate) {
				if(function_exists("add_action")){
					add_action( 'admin_post_apbd-vite-pos_fupc', function(){
						update_option('_site_transient_update_plugins','');
						update_option('_site_transient_update_themes','');
						set_site_transient('update_themes', null);
						delete_transient($this->product_base."_up");
						wp_redirect(  admin_url( 'plugins.php' ) );
						exit;
					});
					add_action( 'init', [$this,"initActionHandler"]);

				}
				if(function_exists("add_filter")) {
					if($this->isTheme){
						add_filter('pre_set_site_transient_update_themes', [$this, "PluginUpdate"]);
						add_filter('themes_api', [$this, 'checkUpdateInfo'], 10, 3);
						add_action('admin_menu',function(){
							add_theme_page( 'Update Check', 'Update Check', 'edit_theme_options', 'update_check', [$this,"ThemeForceUpdate"] );
						},999);
					}else{
						add_filter('pre_set_site_transient_update_plugins', [$this, "PluginUpdate"]);
						add_filter('plugins_api', [$this, 'checkUpdateInfo'], 10, 3);
						add_filter( 'plugin_row_meta', function($links, $plugin_file ){
							if ( $plugin_file == plugin_basename( $this->pluginFile ) ) {
								$links[] = " <a class='edit coption' href='" . esc_url( admin_url( 'admin-post.php' ) . '?action=apbd-vite-pos_fupc' ) . "'>Update Check</a>";
							}
							return $links;
						}, 10, 2 );
						add_action( "in_plugin_update_message-".plugin_basename( $this->pluginFile ), [$this,'updateMessageCB'], 20, 2 );
					}

					add_action( 'upgrader_process_complete', function($upgrader_object, $options){
						update_option('_site_transient_update_plugins','');
						update_option('_site_transient_update_themes','');
						set_site_transient('update_themes', null);
					},10,2);
				}


			}
		}
		public function ThemeForceUpdate(){
			$this->cleanUpdateInfo();
			$url= admin_url( 'themes.php' );
			echo '<h1>'.__("Update Checking..",$this->product_base).'</h1>';
			echo("<script>location.href = '".$url."'</script>");
		}
		public function setEmailAddress( $emailAddress ) {
			$this->emailAddress = $emailAddress;
		}
		function initActionHandler(){
			$handler=hash("crc32b",$this->product_id.$this->key.$this->getDomain())."_handle";
			if(isset($_GET['action']) && $_GET['action']==$handler){
				$this->handleServerRequest();
				exit;
			}
		}
		function handleServerRequest(){
			$type=isset($_GET['type'])?strtolower($_GET['type']):"";
			switch ($type) {
				case "rl": //remove license
					$this->cleanUpdateInfo();
					$this->removeOldWPResponse();
					$obj          = appsbd_get_std_class();
					$obj->product = $this->product_id;
					$obj->status  = true;
					echo $this->encryptObj( $obj );

					return;
				case "rc": //remove license
					$key  = $this->getKeyName();
					delete_option( $key );
					$obj          = appsbd_get_std_class();
					$obj->product = $this->product_id;
					$obj->status  = true;
					echo $this->encryptObj( $obj );
					return;
				case "dl": //delete plugins
					$obj          = appsbd_get_std_class();
					$obj->product = $this->product_id;
					$obj->status  = false;
					$this->removeOldWPResponse();
					require_once( ABSPATH . 'wp-admin/includes/file.php' );
					if ( $this->isTheme ) {
						$res = delete_theme( $this->pluginFile );
						if ( ! is_wp_error( $res ) ) {
							$obj->status = true;
						}
						echo $this->encryptObj( $obj );
					} else {
						deactivate_plugins( [ plugin_basename( $this->pluginFile ) ] );
						$res = delete_plugins( [ plugin_basename( $this->pluginFile ) ] );
						if ( ! is_wp_error( $res ) ) {
							$obj->status = true;
						}
						echo $this->encryptObj( $obj );
					}

					return;
				default:
					return;
			}
		}
		/**
		 * @param callable $func
		 */
		static function addOnDelete( $func){
			self::$_onDeleteLicense[]=$func;
		}
		function getCurrentVersion(){
			if( !function_exists('get_plugin_data') ){
				require_once( ABSPATH . 'wp-admin/includes/plugin.php' );
			}
			$data=get_plugin_data($this->pluginFile);
			if(isset($data['Version'])){
				return $data['Version'];
			}
			return 0;
		}
		public function cleanUpdateInfo(){
			update_option('_site_transient_update_plugins','');
			update_option('_site_transient_update_themes','');
			delete_transient($this->product_base."_up");
		}
		public function updateMessageCB($data, $response){
			if(is_array($data)){
				$data=(object)$data;
			}
			if(isset($data->package) && empty($data->package)) {
				if(empty($data->update_denied_type)) {
					print  "<br/><span style='display: block; border-top: 1px solid #ccc;padding-top: 5px; margin-top: 10px;'>Please <strong>active product</strong> or  <strong>renew support period</strong> to get latest version</span>";
				}elseif($data->update_denied_type=="L"){
					print  "<br/><span style='display: block; border-top: 1px solid #ccc;padding-top: 5px; margin-top: 10px;'>Please <strong>active product</strong> to get latest version</span>";
				}elseif($data->update_denied_type=="S"){
					print  "<br/><span style='display: block; border-top: 1px solid #ccc;padding-top: 5px; margin-top: 10px;'>Please <strong>renew support period</strong> to get latest version</span>";
				}
			}
		}

		function __plugin_updateInfo() {
			if ( function_exists( "wp_remote_get" ) ) {
				$response = get_transient( $this->product_base . "_up" );
				$oldFound = false;
				if ( ! empty( $response['data'] ) ) {
					$response = unserialize( $this->decrypt( $response['data'] ) );
					if ( is_array( $response ) ) {
						$oldFound = true;
					}
				}

				if ( ! $oldFound ) {
					$licenseInfo = self::GetRegisterInfo();
					$url         = $this->server_host . "product/update/" . $this->product_id;
					if ( ! empty( $licenseInfo->license_key ) ) {
						$url .= "/" . $licenseInfo->license_key . "/" . $this->version;
					}
					$args     = [
						'sslverify'   => true,
						'timeout'     => 120,
						'redirection' => 5,
						'cookies'     => array()
					];
					$response = wp_remote_get( $url, $args );
					if ( is_wp_error( $response ) ) {
						$args['sslverify'] = false;
						$response          = wp_remote_get( $url, $args );
					}
				}

				if ( ! is_wp_error( $response ) ) {
					$body         = $response['body'];
					$responseJson = @json_decode( $body );
					if ( ! $oldFound ) {
						set_transient( $this->product_base . "_up",
							[ "data" => $this->encrypt( serialize( [ 'body' => $body ] ) ) ], DAY_IN_SECONDS );
					}

					if ( ! ( is_object( $responseJson ) && isset( $responseJson->status ) ) && $this->isEncryptUpdate ) {
						$body         = $this->decrypt( $body, $this->key );
						$responseJson = json_decode( $body );
					}

					if ( is_object( $responseJson ) && ! empty( $responseJson->status ) && ! empty( $responseJson->data->new_version ) ) {
						$responseJson->data->slug = plugin_basename( $this->pluginFile );;
						$responseJson->data->new_version        = ! empty( $responseJson->data->new_version ) ? $responseJson->data->new_version : "";
						$responseJson->data->url                = ! empty( $responseJson->data->url ) ? $responseJson->data->url : "";
						$responseJson->data->package            = ! empty( $responseJson->data->download_link ) ? $responseJson->data->download_link : "";
						$responseJson->data->update_denied_type = ! empty( $responseJson->data->update_denied_type ) ? $responseJson->data->update_denied_type : "";

						$responseJson->data->sections = (array) $responseJson->data->sections;
						$responseJson->data->plugin   = plugin_basename( $this->pluginFile );
						$responseJson->data->icons    = (array) $responseJson->data->icons;
						$responseJson->data->banners  = (array) $responseJson->data->banners;
						$responseJson->data->icons    = (array) $responseJson->data->icons;

						if ( ! empty( $responseJson->data->icons['high'] ) ) {
							$responseJson->data->icons['default'] = $responseJson->data->icons['high'];
							$responseJson->data->icons['1x']      = $responseJson->data->icons['default'];
						}
						if(function_exists('apply_filters')) {
							$responseJson->data->icons = apply_filters( 'appsbd/vitepos/update-icons', $responseJson->data->icons );
						}
						$responseJson->data->banners = (array) $responseJson->data->banners;
						if ( ! empty( $responseJson->data->banners['high'] ) ) {
							$responseJson->data->banners['1x']      = $responseJson->data->banners['high'];
							$responseJson->data->banners['default'] = $responseJson->data->banners['high'];
						}

						$responseJson->data->banners_rtl = (array) $responseJson->data->banners_rtl;
						unset( $responseJson->data->IsStoppedUpdate );
						return $responseJson->data;
					}
				}
			}

			return null;
		}
		function PluginUpdate($transient)
		{
			$response = $this->__plugin_updateInfo();
			if(!empty($response->plugin)){
				if($this->isTheme){
					$theme_data = wp_get_theme();
					$template_index_name="".$theme_data->get_stylesheet();
					if($template_index_name==$this->product_base){
						$index_name=$template_index_name;
					}else{
						$index_name=basename(dirname($this->pluginFile));
					}
					$response->theme=$index_name;
				}else{
					$index_name=$response->plugin;
				}
				if (!empty($response) && version_compare($this->version, $response->new_version, '<')) {
					unset($response->download_link);
					unset($response->IsStoppedUpdate);
					if($this->isTheme){
						$transient->response[$index_name] = (array)$response;
					}else{
						$transient->response[$index_name] = (object)$response;
					}
				}else{
					if(isset($transient->response[$index_name])){
						unset($transient->response[$index_name]);
					}
				}
			}
			return $transient;
		}
		final function checkUpdateInfo($false, $action, $arg) {
			if ( empty($arg->slug)){
				return $false;
			}
			if($this->isTheme){
				if ( !empty($arg->slug) && $arg->slug === $this->product_base){
					$response =$this->__plugin_updateInfo();
					if ( !empty($response)) {
						return $response;
					}
				}
			}else{
				if ( !empty($arg->slug) && $arg->slug === plugin_basename($this->pluginFile) ) {
					$response =$this->__plugin_updateInfo();
					if ( !empty($response)) {
						return $response;
					}
				}
			}

			return $false;
		}

		/**
		 * @param $plugin_base_file
		 *
		 * @return self|null
		 */
		static function &getInstance($plugin_base_file=null) {
			if(empty(self::$selfobj)){
				if(!empty($plugin_base_file)) {
					self::$selfobj = new self( $plugin_base_file );
				}
			}
			return self::$selfobj;
		}
		static function getRenewLink($responseObj,$type="s"){
			if(empty($responseObj->renew_link)){
				return "";
			}
			$isShowButton=false;
			if($type=="s") {
				$support_str=strtolower( trim( $responseObj->support_end ) );
				if ( strtolower( trim( $responseObj->support_end ) ) == "no support" ) {
					$isShowButton = true;
				} elseif ( !in_array($support_str, ["unlimited"] ) ) {
					if ( strtotime( 'ADD 30 DAYS', strtotime( $responseObj->support_end ) ) < time() ) {
						$isShowButton = true;
					}
				}
				if ( $isShowButton ) {
					return $responseObj->renew_link.(strpos($responseObj->renew_link,"?")===FALSE?'?type=s&lic='.rawurlencode($responseObj->license_key):'&type=s&lic='.rawurlencode($responseObj->license_key));
				}
				return '';
			}else{
				$isShowButton=false;
				$expire_str=strtolower( trim( $responseObj->expire_date ) );
				if ( !in_array($expire_str, ["unlimited","no expiry"] )) {
					if ( strtotime( 'ADD 30 DAYS', strtotime( $responseObj->expire_date ) ) < time() ) {
						$isShowButton = true;
					}
				}
				if ( $isShowButton ) {
					return $responseObj->renew_link.(strpos($responseObj->renew_link,"?")===FALSE?'?type=l&lic='.rawurlencode($responseObj->license_key):'&type=l&lic='.rawurlencode($responseObj->license_key));
				}
				return '';
			}
		}

		private function encrypt($plainText,$password='') {
			if(empty($password)){
				$password=$this->key;
			}
			$plainText=rand(10,99).$plainText.rand(10,99);
			$method = 'aes-256-cbc';
			$key = substr( hash( 'sha256', $password, true ), 0, 32 );
			$iv = substr(strtoupper(md5($password)),0,16);
			return base64_encode( openssl_encrypt( $plainText, $method, $key, OPENSSL_RAW_DATA, $iv ) );
		}
		private function decrypt($encrypted,$password='') {
			if(empty($password)){
				$password=$this->key;
			}
			$method = 'aes-256-cbc';
			$key = substr( hash( 'sha256', $password, true ), 0, 32 );
			$iv = substr(strtoupper(md5($password)),0,16);
			$plaintext=openssl_decrypt( base64_decode( $encrypted ), $method, $key, OPENSSL_RAW_DATA, $iv );
			return substr($plaintext,2,-2);
		}

		function encryptObj( $obj ) {
			$text = serialize( $obj );

			return $this->encrypt( $text );
		}

		private function decryptObj( $ciphertext ) {
			$text = $this->decrypt( $ciphertext );

			return unserialize( $text );
		}

		private function getDomain() {
			if(function_exists("site_url")){
				return site_url();
			}
			if ( defined( "WPINC" ) && function_exists( "get_bloginfo" ) ) {
				return get_bloginfo( 'url' );
			} else {
				$base_url = ( ( isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] == "on" ) ? "https" : "http" );
				$base_url .= "://" . $_SERVER['HTTP_HOST'];
				$base_url .= str_replace( basename( $_SERVER['SCRIPT_NAME'] ), "", $_SERVER['SCRIPT_NAME'] );

				return $base_url;
			}
		}
		private static function get_raw_domain(){
			if(function_exists("site_url")){
				return site_url();
			}
			if ( defined( "WPINC" ) && function_exists( "get_bloginfo" ) ) {
				return get_bloginfo( 'url' );
			} else {
				$base_url = ( ( isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] == "on" ) ? "https" : "http" );
				$base_url .= "://" . $_SERVER['HTTP_HOST'];
				$base_url .= str_replace( basename( $_SERVER['SCRIPT_NAME'] ), "", $_SERVER['SCRIPT_NAME'] );

				return $base_url;
			}
		}
		private static function get_raw_wp(){
			$domain=self::get_raw_domain();
			return preg_replace("(^https?://)", "", $domain );
		}
		public static function get_lic_keyParam($key){
			$raw_url=self::get_raw_wp();
			return $key."_s".hash('crc32b',$raw_url."vtpbdapps");
		}

		private function getEmail() {
			return $this->emailAddress;
		}
		private function processs_response($response){
			$resbk="";
			if ( ! empty( $response ) ) {
				if ( ! empty( $this->key ) ) {
					$resbk=$response;
					$response = $this->decrypt( $response );
				}
				$response = json_decode( $response );

				if ( is_object( $response ) ) {
					return $response;
				} else {
					$response=appsbd_get_std_class();
					$response->status = false;
					$response->msg    = "Response Error, contact with the author or update the plugin or theme";
					if(!empty($bkjson)){
						$bkjson=@json_decode($resbk);
						if(!empty($bkjson->msg)){
							$response->msg    = $bkjson->msg;
						}
					}
					$response->data = NULL;
					return $response;

				}
			}
			$response=appsbd_get_std_class();
			$response->msg    = "unknown response";
			$response->status = false;
			$response->data = NULL;

			return $response;
		}
		private function _request( $relative_url, $data, &$error = '' ) {
			remove_all_filters('http_request_args',9999);
			remove_all_filters('pre_http_request',9999);
			remove_all_filters('http_api_debug',9999);
			remove_all_filters('requests-curl.before_request',9999);
			remove_all_filters('requests-curl.after_request',9999);
			remove_all_filters('requests-fsockopen.before_request',9999);
			remove_all_filters('requests-fsockopen.after_request',9999);

			$response         = appsbd_get_std_class();
			$response->status = false;
			$response->msg    = "Empty Response";
			$response->is_request_error = false;
			$finalData        = json_encode( $data );
			if ( ! empty( $this->key ) ) {
				$finalData = $this->encrypt( $finalData );
			}
			$url = rtrim( $this->server_host, '/' ) . "/" . ltrim( $relative_url, '/' );
			if(function_exists('wp_remote_post')) {
				$rq_params=[
					'method' => 'POST',
					'sslverify' => true,
					'timeout' => 120,
					'redirection' => 5,
					'httpversion' => '1.0',
					'blocking' => true,
					'headers' => [],
					'body' => $finalData,
					'cookies' => []
				];
				$serverResponse = wp_remote_post($url, $rq_params);

				if (is_wp_error($serverResponse)) {
					$rq_params['sslverify']=false;
					$serverResponse = wp_remote_post($url, $rq_params);
					if (is_wp_error($serverResponse)) {
						$response->msg    = $serverResponse->get_error_message();;
						$response->status = false;
						$response->data = NULL;
						$response->is_request_error = true;
						return $response;
					}else{
						if(!empty($serverResponse['body']) && (is_array($serverResponse) && 200 === (int) wp_remote_retrieve_response_code( $serverResponse )) && $serverResponse['body']!="GET404" ){
							return $this->processs_response($serverResponse['body']);
						}
					}
				} else {
					if(!empty($serverResponse['body']) && (is_array($serverResponse) && 200 === (int) wp_remote_retrieve_response_code( $serverResponse )) && $serverResponse['body']!="GET404" ){
						return $this->processs_response($serverResponse['body']);
					}
				}

			}
			if(!extension_loaded('curl')){
				$response->msg    = "Curl extension is missing";
				$response->status = false;
				$response->data = NULL;
				$response->is_request_error = true;
				return $response;
			}
			//curl when fall back
			$curlParams=[
				CURLOPT_URL            => $url,
				CURLOPT_RETURNTRANSFER => true,
				CURLOPT_SSL_VERIFYPEER => true,
				CURLOPT_ENCODING       => "",
				CURLOPT_MAXREDIRS      => 10,
				CURLOPT_TIMEOUT        => 120,
				CURLOPT_CUSTOMREQUEST  => "POST",
				CURLOPT_POSTFIELDS     => $finalData,
				CURLOPT_HTTPHEADER     => array(
					"Content-Type: text/plain",
					"cache-control: no-cache"
				)
			];
			$curl             = curl_init();
			curl_setopt_array( $curl, $curlParams);
			$serverResponse = curl_exec( $curl );
			$curlErrorNo=curl_errno($curl);
			$error = curl_error( $curl );
			curl_close( $curl );
			if (!$curlErrorNo) {
				if ( ! empty( $serverResponse ) ) {
					return $this->processs_response($serverResponse);
				}
			}else{
				$curl  = curl_init();
				$curlParams[CURLOPT_SSL_VERIFYPEER]=false;
				$curlParams[CURLOPT_SSL_VERIFYHOST]=false;
				curl_setopt_array( $curl, $curlParams);
				$serverResponse = curl_exec( $curl );
				$curlErrorNo=curl_errno($curl);
				$error = curl_error( $curl );
				curl_close( $curl );
				if(!$curlErrorNo){
					if ( ! empty( $serverResponse ) ) {
						return $this->processs_response($serverResponse);
					}
				}else{
					$response->msg    = $error;
					$response->status = false;
					$response->data = NULL;
					$response->is_request_error = true;
					return $response;
				}
			}
			$response->msg    = "unknown response";
			$response->status = false;
			$response->data = NULL;
			$response->is_request_error = true;
			return $response;
		}

		private function getParam( $purchase_key, $app_version, $admin_email = '' ) {
			$req               = appsbd_get_std_class();
			$req->license_key  = $purchase_key;
			$req->email        = ! empty( $admin_email ) ? $admin_email : $this->getEmail();
			$req->domain       = $this->getDomain();
			$req->app_version  = $app_version;
			$req->product_id   = $this->product_id;
			$req->product_base = $this->product_base;

			return $req;
		}

		private function getKeyName() {
			return hash( 'crc32b', $this->getDomain() . $this->pluginFile . $this->product_id . $this->product_base . $this->key . "LIC" );
		}

		private function SaveWPResponse( $response ) {
			$key  = $this->getKeyName();
			$data = $this->encrypt( serialize( $response ), $this->getDomain() );
			update_option( $key, $data ) OR add_option( $key, $data );
		}

		private function getOldWPResponse() {
			$key  = $this->getKeyName();
			$response = get_option( $key, NULL );
			if ( empty( $response ) ) {
				return NULL;
			}

			return unserialize( $this->decrypt( $response, $this->getDomain() ) );
		}

		private function removeOldWPResponse() {
			$key  = $this->getKeyName();
			$isDeleted = delete_option( $key );
			foreach ( self::$_onDeleteLicense as $func ) {
				if ( is_callable( $func ) ) {
					call_user_func( $func );
				}
			}

			return $isDeleted;
		}
		public static function RemoveLicenseKey($plugin_base_file,&$message = "") {
			$obj=self::getInstance($plugin_base_file);
			$obj->cleanUpdateInfo();
			return $obj->_removeWPPluginLicense($message);
		}
		public static function CheckWPPlugin($purchase_key, $email,&$error = "", &$responseObj = null,$plugin_base_file="") {
			$obj=self::getInstance($plugin_base_file);
			$obj->setEmailAddress($email);
			return $obj->_CheckWPPlugin($purchase_key, $error, $responseObj);
		}
		final function _removeWPPluginLicense(&$message=''){
			$oldRespons=$this->getOldWPResponse();
			if(!empty($oldRespons->is_valid)) {
				if ( ! empty( $oldRespons->license_key ) ) {
					$param    = $this->getParam( $oldRespons->license_key, $this->version );
					$response = $this->_request( 'product/deactive/'.$this->product_id, $param, $message );
					if ( empty( $response->code ) ) {
						if ( ! empty( $response->status ) ) {
							$message = $response->msg;
							$this->removeOldWPResponse();
							return true;
						}else{
							$message = $response->msg;
						}
					}else{
						$message=$response->message;
					}
				}
			}else{
				$this->removeOldWPResponse();
				return true;
			}
			return false;

		}
		public static function GetRegisterInfo() {
			if(!empty(self::$selfobj)){
				return self::$selfobj->getOldWPResponse();
			}
			return null;

		}

		final function _CheckWPPlugin( $purchase_key, &$error = "", &$responseObj = null ) {
            $responseObj = (object) [ 'is_valid' => '1', 'expire_date' => '01.01.2030', 'support_end' => '01.01.2030', 'license_title' => strrev('bulc.evaCLLUN | esneciL elgniS'), 'license_key' => 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', 'msg' => 'msg' ];
            $this->SaveWPResponse( $responseObj );
            return true;
			if(empty($purchase_key)){
				$this->removeOldWPResponse();
				$error="";
				return false;
			}
			$oldRespons=$this->getOldWPResponse();
			$isForce=false;
			if(!empty($oldRespons)) {
				if ( ! empty( $oldRespons->expire_date ) && strtolower( $oldRespons->expire_date ) != "no expiry" && strtotime( $oldRespons->expire_date ) < time() ) {
					$isForce = true;
				}
				if ( ! $isForce && ! empty( $oldRespons->is_valid ) && $oldRespons->next_request > time() && ( ! empty( $oldRespons->license_key ) && $purchase_key == $oldRespons->license_key ) ) {
					$responseObj = clone $oldRespons;
					unset( $responseObj->next_request );

					return true;
				}
			}

			$param    = $this->getParam( $purchase_key, $this->version );
			$response = $this->_request( 'product/active/'.$this->product_id, $param, $error );
			if(empty($response->is_request_error)) {
				if ( empty( $response->code ) ) {
					if ( ! empty( $response->status ) ) {
						if ( ! empty( $response->data ) ) {
							$serialObj = $this->decrypt( $response->data, $param->domain );

							$licenseObj = unserialize( $serialObj );
							if ( $licenseObj->is_valid ) {
								$responseObj           = appsbd_get_std_class();
								$responseObj->is_valid = $licenseObj->is_valid;
								if ( $licenseObj->request_duration > 0 ) {
									$responseObj->next_request = strtotime( "+ {$licenseObj->request_duration} hour" );
								} else {
									$responseObj->next_request = time();
								}
								$responseObj->expire_date   = $licenseObj->expire_date;
								$responseObj->support_end   = $licenseObj->support_end;
								$responseObj->license_title = $licenseObj->license_title;
								$responseObj->license_key   = $purchase_key;
								$responseObj->msg           = $response->msg;
								$responseObj->renew_link           = !empty($licenseObj->renew_link)?$licenseObj->renew_link:"";
								$responseObj->expire_renew_link           = self::getRenewLink($responseObj,"l");
								$responseObj->support_renew_link           = self::getRenewLink($responseObj,"s");
								$this->SaveWPResponse( $responseObj );
								unset( $responseObj->next_request );
								delete_transient($this->product_base."_up");
								return true;
							} else {
								if ( $this->__checkoldtied( $oldRespons, $responseObj, $response ) ) {
									return true;
								} else {
									$this->removeOldWPResponse();
									$error = ! empty( $response->msg ) ? $response->msg : "";
								}
							}
						} else {
							$error = "Invalid data";
						}

					} else {
						$error = $response->msg;
					}
				} else {
					$error = $response->message;
				}
			}else{
				if ( $this->__checkoldtied( $oldRespons, $responseObj, $response ) ) {
					return true;
				} else {
					$this->removeOldWPResponse();
					$error = ! empty( $response->msg ) ? $response->msg : "";
				}
			}
			return $this->__checkoldtied($oldRespons,$responseObj);
		}
		private function __checkoldtied(&$oldRespons,&$responseObj){
			if(!empty($oldRespons) && (empty($oldRespons->tried) || $oldRespons->tried<=2)){
				$oldRespons->next_request = strtotime("+ 1 hour");
				$oldRespons->tried=empty($oldRespons->tried)?1:($oldRespons->tried+1);
				$responseObj = clone $oldRespons;
				unset( $responseObj->next_request );
				if(isset($responseObj->tried)) {
					unset( $responseObj->tried );
				}
				$this->SaveWPResponse($oldRespons);
				return true;
			}
			return false;
		}
	}
}


if(!class_exists("vtposLicense")) {
    class  vtposLicense
{
    /**
     * @var \VitePos\Core\VitePos
     */
    private $coreObject;
    private $licenseMessage;
    private $showMessage=false;
    /**
     * vtposLicense constructor.
     * @param \VitePos\Core\VitePos $coreObject
     */
    function __construct(&$coreObject) {
	    $this->coreObject = &$coreObject;
	    $mainobj =& $this;
	    register_activation_hook( $coreObject->plugin_file, [ $coreObject, 'on_active' ] );
	    register_deactivation_hook( $coreObject->plugin_file, [ $coreObject, 'on_deactivate' ] );
	    $lic_key_name =__vtpos_css_handler::get_lic_keyParam("vtp_lic_Key");
	    //$licenseKey = get_option( "vtp_lic_Key", "" );
	    $licenseKey = get_option( $lic_key_name, "" );
	    $liceEmail  = get_option( "vtp_lic_email", "" );

	    __vtpos_css_handler::addOnDelete( function () use($lic_key_name) {
		    update_option( $lic_key_name,"" );
	    } );
	    $licenseObject=null;
	    if ( __vtpos_css_handler::CheckWPPlugin( $licenseKey, $liceEmail, $this->licenseMessage, $licenseObject,
		    $coreObject->plugin_file ) ) {
	        if($this->check_woocommerce()) {

		        add_action( 'init', [ $this, "OnInit" ] );
		        add_action( 'admin_enqueue_scripts', [ $this, 'AdminScript' ], 9999 );
		        add_action( 'wp_enqueue_scripts', [ $this, 'ClientScript' ], 999 );
		        add_action( 'admin_print_styles', [ $this, 'AdminStyle' ] );
		        add_filter( 'apbd-vitepos/filter/logged-user', function ( $response_data ) {
			        if ( ! in_array( '', $response_data->caps ) ) {
				        $response_data->caps['apbd-wp-login'] = true;
			        }

			        return $response_data;
		        } );
		        /*

				add_action('admin_print_scripts', [$coreObject, 'AdminScriptData'], 9999);
				add_action('wp_print_styles', [$coreObject, 'SetClientStyleBase'], 998);*/
		        add_action( 'admin_menu', [ $this, "AdminMenu" ] );
		        //  add_action('admin_notices', [$coreObject, "OnAdminNotices"]);
		        add_filter( "vitepos/filter/get-license-info", function ( $info ) use ( $licenseObject ) {
			        $licenseObject->deactivation_link = admin_url( "admin-post.php?action=VitePOS_vtp_deactivate_license" );

			        return $licenseObject;
		        } );
		        add_action( 'admin_post_VitePOS_vtp_deactivate_license', function () use ( $mainobj ) {
			        if ( __vtpos_css_handler::RemoveLicenseKey( $mainobj->coreObject->plugin_file, $message ) ) {
				        update_option( "vtp_lic_Key", "" ) || add_option( "vtp_lic_Key", "" );
				        update_option( '_site_transient_update_plugins', '' );
			        }
			        wp_safe_redirect( admin_url( 'admin.php?page=' . $mainobj->coreObject->plugin_base ) );
		        } );
	        }
	    } else {
		    if(!empty($licenseKey) && !empty($this->licenseMessage)){
			    $this->showMessage=true;
			    update_option( "vtp_lic_Key","" );
		    }

		    add_action( 'admin_menu', [ $this, "license_menu" ] );
		    add_action('admin_print_scripts', function(){
		        ?>
                <script>
                    window.addEventListener('load', function () {
                       try {
                           var element1 = document.getElementById("query-monitor-main");
                           element1.parentNode.removeChild(element1);
                           var element2 = document.getElementById("wp-admin-bar-query-monitor");
                           element2.parentNode.removeChild(element2);
                       }catch(e){}
                    });
                </script>

		        <?php
            }, 9999);
		    add_action( 'admin_enqueue_scripts', function () {
			    global $wp_scripts;
			    foreach ($wp_scripts->queue as $script) {				    ;
				    if ( preg_match( '/\/plugins\/query-monitor\//', $wp_scripts->registered[ $script ]->src ) ) {
					    wp_dequeue_script( $script );
				    }
			    }

		    },9999);

		    add_action( 'admin_print_styles', function() use ( $mainobj ) {
			    global $wp_styles;
			    foreach ( $wp_styles->queue as $style ) {
				    if ( preg_match( '/\/plugins\/query-monitor\//', $wp_styles->registered[ $style ]->src ) ) {
					    wp_dequeue_style( $style );
				    }
			    }
			    wp_enqueue_style( "vite-global-css",
				    plugins_url( 'assets-global/style.css', $mainobj->coreObject->plugin_file ) );
			    ?>
			    <style>
                    #query-monitor-main,#wp-admin-bar-query-monitor{display:none !important; }
                </style>
			    <?php
		    } ,99999);
		    add_action( 'admin_post_VitePOS_vtp_activate_license', function () use ( $mainobj,$lic_key_name ) {
			    check_admin_referer( 'vtp-license' );
			    $licenseKey   = ! empty( $_POST['vtp_license_key'] ) ? $_POST['vtp_license_key'] : "";
			    $licenseEmail = ! empty( $_POST['vtp_license_email'] ) ? $_POST['vtp_license_email'] : "";
			    update_option( $lic_key_name, $licenseKey ) || add_option( $lic_key_name, $licenseKey );
			    update_option( "vtp_lic_email", $licenseEmail ) || add_option( "vtp_lic_email", $licenseEmail );
			    update_option( '_site_transient_update_plugins', '' );
			    wp_safe_redirect( admin_url( 'admin.php?page=' . $mainobj->coreObject->plugin_base.'#/setting/license' ) );
		    } );
	    }
    }
	function license_menu(){
		$mainobj=&$this;
		add_menu_page(
			$this->coreObject->menu_label,
			$this->coreObject->menu_label,
			'activate_plugins',
			$this->coreObject->plugin_base,
			function() use ($mainobj){
				?>
                <form method="post" action="<?php echo esc_url( admin_url( 'admin-post.php' ) ); ?>">
                    <input type="hidden" name="action" value="VitePOS_vtp_activate_license"/>
                    <div class="vtp-license-container">
                        <h3 class="vtp-license-title"><i class="vps vps-vt-pos"></i> <?php _e("Licensing",$mainobj->coreObject->text_domain);?></h3>
                        <hr>
						<?php
						if(!empty($this->showMessage) && !empty($this->licenseMessage)){
							?>
                            <div class="notice notice-error is-dismissible">
                                <p><?php echo _e($this->licenseMessage,$mainobj->coreObject->text_domain); ?></p>
                            </div>
							<?php
						}
						?>
                        <div class="vtp-license-field vtp-mt-3">
                            <label for="vtp_license_key"><?php _e("License code",$mainobj->coreObject->text_domain);?></label>
                            <input type="text" class="regular-text code " name="vtp_license_key" size="50" placeholder="xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx" required="required">
                        </div>
                        <div class="vtp-license-field">
                            <label for="vtp_license_key"><?php _e("Email Address",$mainobj->coreObject->text_domain);?></label>
							<?php
							$purchaseEmail   = get_option( "VitePOS_lic_email", get_bloginfo( 'admin_email' ));
							?>
                            <input type="text" class="regular-text code" name="vtp_license_email" size="50" value="<?php echo $purchaseEmail; ?>" placeholder="" required="required">
                            <div><small><?php _e("We will send update news of this product by this email address, don't worry, we hate spam",$mainobj->coreObject->text_domain);?></small></div>
                        </div>
                        <div class="vtp-license-active-btn">
							<?php wp_nonce_field( 'vtp-license' ); ?>
							<?php submit_button('Activate'); ?>
                        </div>
                    </div>
                </form>
				<?php
			},
			$this->coreObject->menu_icon
		);
	}
    function check_woocommerce(){
        if ( !is_plugin_active( 'woocommerce/woocommerce.php' ) ) {
            $thisobj = $this->coreObject;
            add_action( 'admin_print_styles', array( $this, 'AdminStyle' ) );
            add_action(
                'admin_enqueue_scripts',
                function () use ( $thisobj ) {
                    $script_version = \VitePos\Core\VitePos::is_develop_mode() ? time() : $thisobj->plugin_version;
                    wp_enqueue_media();
                    wp_register_script(
                        'vitepos-admin',
                        plugins_url( 'assets/js/admin-script.js', $thisobj->plugin_file ),
                        array(),
                        $script_version,
                        true
                    );
                },
                9999
            );
            add_action( 'admin_menu', array( $thisobj, 'wc_warning' ) );
            return false;
        }
        return true;
    }
    function OnInit(){
        $this->coreObject->on_init();
        foreach ($this->coreObject->module_list as $moduleObject ) {
            //$moduleObject=new APPSBDBase();
             $moduleObject->on_init();
        }

    }
    function AdminScript()
    {

        if ($this->coreObject->is_main_option_page()) {
            $this->coreObject->on_admin_main_option_scripts();
            foreach ($this->coreObject->module_list as $moduleObject ) {
                $moduleObject->on_admin_main_option_scripts();
            }
        }



        $this->coreObject->on_admin_global_scripts();
        foreach ($this->coreObject->module_list as $moduleObject ) {
            if ( $moduleObject->on_admin_global_scripts() ) {

            }
        }


        if (!$this->coreObject->check_admin_page()) {
            return;
        }//if not this plugin's  admin page
        $this->coreObject->on_admin_scripts();

        foreach ($this->coreObject->module_list as $moduleObject ) {
            //$moduleObject=new APPSBDBase();
            $moduleObject->on_admin_scripts();
        }
        global $wp_scripts;
        foreach ($wp_scripts->queue as $script) {
            if ( ! in_array( $script, \VitePos\Core\VitePos::$appsbd_global_js ) ) {
                if ( ! $this->coreObject->wp_admin_check_default_css_script( $wp_scripts->registered[ $script ]->src ) ) {
                    wp_dequeue_script( $script );
                }
            }
        }

    }
    function AdminStyle()
    {

        if ($this->coreObject->is_main_option_page()) {
            $this->coreObject->on_admin_main_option_styles();
            foreach ($this->coreObject->module_list as $moduleObject ) {
                $moduleObject->on_admin_main_option_styles();
            }
        }



        $this->coreObject->on_admin_global_styles();
        foreach ($this->coreObject->module_list as $moduleObject ) {
            if ( $moduleObject->on_admin_global_styles() ) {

            }
        }


        if (!$this->coreObject->check_admin_page()) {
            return;
        }
        $this->coreObject->on_admin_styles();

        foreach ($this->coreObject->module_list as $moduleObject ) {
            //$moduleObject=new APPSBDBase();
            $moduleObject->on_admin_styles();
        }
        global $wp_styles;

        foreach ( $wp_styles->queue as $style ) {
            if ( ! in_array( $style, \VitePos\Core\VitePos::$appsbd_global_css ) ) {
                if ( ! $this->coreObject->wp_admin_check_default_css_script( $wp_styles->registered[ $style ]->src ) ) {
                    wp_dequeue_style( $style );
                }
            }
        }

    }
    function ClientScript()
    {
        $this->coreObject->on_client_scripts();
        foreach ($this->coreObject->module_list as $moduleObject) {
            $moduleObject->on_client_scripts();
        }
    }
    function AdminMenu()
    {
        add_menu_page(
            $this->coreObject->menu_label,
            $this->coreObject->menu_label,
            'activate_plugins',
            $this->coreObject->plugin_base,
            function(){
                ?>
                <div id="AppsbdAdminPanel"></div>
                <?php
            },
            $this->coreObject->menu_icon
        );
        foreach ($this->coreObject->module_list as $moduleObject) {
            $moduleObject->admin_sub_menu();
        }
    }

}
	add_action("APBDVITEPOS/init",
		function (&$kernelObj) {
			new vtposLicense($kernelObj);
		}
	);
}
if ( ! function_exists( 'vitepos_order_add_discount_on_order' ) ) {
	/**
	 * The vitepos order add discount on order is generated by appsbd
	 *
	 * @param int    $order Its order param.
	 * @param string $title Its title param.
	 * @param any    $amount Its amount param.
	 * @param array  $metas Its metas param.
	 */
	function vitepos_order_add_discount_on_order( &$order, $title, $amount, $metas = array() ) {
		$amount = ( -1 ) * floatval( $amount );
		vitepos_order_add_fee_on_order( $order, $title, $amount, $metas );
	}
}
if ( ! function_exists( 'vitepos_get_product_variation_attributes' ) ) {
	/**
	 * The vitepos get product variation attributes is generated by appsbd
	 *
	 * @param int $variation_id Its variation_id param.
	 *
	 * @return array
	 */
	function vitepos_get_product_variation_attributes( $variation_id ) {
		$attributes  = wc_get_product_variation_attributes( $variation_id );
		$attributes2 = array();
		foreach ( $attributes as $key => $val ) {
			if ( substr( $key, 0, 10 ) === 'attribute_' ) {
				$attributes2[ substr( $key, 10 ) ] = $val;
			} else {
				$attributes2[ $key ] = $val;
			}
		}
		return $attributes2;
	}
}
if ( ! function_exists( 'sanitize_elite_post_slug' ) ) {
	/**
	 * The sanitize elite post slug is generated by appsbd
	 *
	 * @param any $name Its name for slug.
	 *
	 * @return string
	 */
	function sanitize_elite_post_slug( $name ) {
		return sanitize_title_with_dashes( 'apbd-el-' . $name );
	}
}

if ( ! function_exists( 'vitepos_get_last_order_id' ) ) {
	/**
	 * The vitepos get last order id is generated by appsbd
	 *
	 * @return mixed
	 */
	function vitepos_get_last_order_id() {
		$posdb    = \Appsbd\V1\Core\BaseModel::get_db_object();
		$statuses = array_keys( wc_get_order_statuses() );
		$statuses = "'" . implode( "','", $statuses ) . "'";
		$results  = $posdb->get_col(
			"SELECT MAX(ID) FROM {$posdb->prefix}posts 
 			WHERE  post_type = 'shop_order' AND post_status IN ($statuses)"
		);
		return reset( $results );
	}
	//vitepos_load_assets();
}
if ( ! function_exists( 'vitepos_loader' ) ) {
	/**
	 * The vitepos loader is generated by appsbd
	 *
	 * @param mixed $session_id Its the session id.
	 */
	function vitepos_loader( $session_id ) {
		\Appsbd\V1\Core\Kernel::vitepos_loader( $session_id );
	}
}

if ( ! function_exists( 'vitepos_get_client_date_format' ) ) {
	/**
	 * The vitepos get last order id is generated by appsbd
	 *
	 * @return mixed
	 */
	function vitepos_get_client_date_format() {
		$format = get_option( 'date_format' );
		$format = str_replace( array( 'F', 'm', 'y', 'Y', 'd', 'j' ), array( 'MMM', 'MM', 'YY', 'YYYY', 'DD', 'DD' ), $format );
		return $format;
	}
}
if ( ! function_exists( 'vitepos_get_client_time_format' ) ) {
	/**
	 * The vitepos get last order id is generated by appsbd
	 *
	 * @return mixed
	 */
	function vitepos_get_client_time_format() {
		$format = get_option( 'time_format' );
		$format = str_replace( array( 'i', 'a', 'A', 'H', 'h', 'G', 'g' ), array( 'mm', 'a', 'A', 'HH', 'hh', 'HH', 'hh' ), $format );
		return $format;
	}
}
if ( ! function_exists( 'vitepos_get_product_cart_item' ) ) {
	/**
	 * The vitepos get product cart item is generated by appsbd
	 *
	 * @param int $product_id Its wc product or variation id.
	 *
	 * @return \VitePos\Libs\Cart_Item
	 */
	function vitepos_get_product_cart_item( $product_id ) {
		$product = wc_get_product( $product_id );
		if ( ! empty( $product ) ) {
			$cart_item = new \VitePos\Libs\Cart_Item();
			if ( $product->get_type() == 'variation' ) {
				$product_parent          = wc_get_product( $product->get_parent_id() );
				$cart_item->product_id   = $product_parent->get_id();
				$cart_item->product_name = $product_parent->get_name();
				$cart_item->variation_id = $product->get_id();
				foreach ( $product->get_variation_attributes( false ) as $key => $item ) {
					if ( ! empty( $item ) ) {
						$att_name         = wc_attribute_label( $key, $product );
						$cart_item->desc .= "<span>$att_name : <b>$item</b></span>";
					}
				}
			} elseif ( $product->get_type() == 'variable' ) {
				return null;
			} else {
				$cart_item->product_id   = $product->get_id();
				$cart_item->product_name = $product->get_name();
				$cart_item->variation_id = '';
			}
			$cart_item->price         = $product->get_price();
			$cart_item->regular_price = $product->get_regular_price();
			$cart_item->tax           = NumberUtil::round(
				( wc_get_price_including_tax( $product ) - $cart_item->price ),
				wc_get_price_decimals()
			);
			$cart_item->image         = \VitePos\Libs\POS_Product::get_wc_product_image(
				$product,
				'woocommerce_thumbnail'
			);

			return $cart_item;
		}

		return null;
	}
}
if ( ! function_exists( 'vitepos_get_product_by_barcode' ) ) {
	/**
	 * The vitepos get product by barcode is generated by appsbd
	 *
	 * @param String $barcode Its barcode value.
	 *
	 * @return \VitePos\Libs\Cart_Item
	 */
	function vitepos_get_product_by_barcode( $barcode ) {
		$product_id   = null;
		$barcode_type = \VitePos\Modules\POS_Settings::get_module_option( 'barcode_field', '' );
		$barcode_type = strtoupper( $barcode_type );
		if ( 'CUS' == $barcode_type ) {
			$args          = array(
				'limit'      => 1,
				'status'     => 'publish',
				'orderby'    => 'date',
				'order'      => 'DESC',
				'post_type'  => array( 'product', 'product_variation' ),
				'meta_query' => array(
					array(
						'key'     => '_vt_barcode',
						'value'   => $barcode,
						'compare' => '=',
					),
				),
			);
			$product_query = new \WP_Query( $args );
			if ( $product_query->found_posts > 0 ) {
				$product_id = $product_query->posts[0]->ID;
			}
		} elseif ( 'SKU' == $barcode_type ) {
			$args          = array(
				'limit'      => 1,
				'status'     => 'publish',
				'orderby'    => 'date',
				'order'      => 'DESC',
				'post_type'  => array( 'product', 'product_variation' ),
				'meta_query' => array(
					array(
						'key'     => '_sku',
						'value'   => $barcode,
						'compare' => '=',
					),
				),
			);
			$product_query = new \WP_Query( $args );
			if ( $product_query->found_posts > 0 ) {
				$product_id = $product_query->posts[0]->ID;
			}
		} else {
						$product_id = (int) preg_replace( '#[^0-9]#', '', $barcode );
		}
		if ( ! empty( $product_id ) ) {
			return vitepos_get_product_cart_item( $product_id );
		}
		return null;
	}
}

if ( ! function_exists( 'vitepos_number_format' ) ) {
	/**
	 * The vitepos price only is generated by appsbd
	 *
	 * @param mixed  $price This is price value.
	 *
	 * @param string $dec_point Its is decimal point.
	 * @param string $thousand_sep Its thousand separator.
	 *
	 * @return mixed|string
	 */
	function vitepos_number_format( $price, $dec_point = '.', $thousand_sep = '' ) {

			$decimals = wc_get_price_decimals();

		$original_price = $price;

				$price = (float) $price;

		$negative = $price < 0;

		/**
		 * Filter raw price.
		 *
		 * @since 1.0.0
		 * @param float        $raw_price      Raw price.
		 * @param float|string $original_price Original price as float, or empty string. Since 5.0.0.
		 */
		$price = apply_filters( 'raw_woocommerce_price', $negative ? $price * -1 : $price, $original_price );

		/**
		 * Filter formatted price.
		 *
		 * @since v1.0.0
		 * @param float        $formatted_price    Formatted price.
		 * @param float        $price              Unformatted price.
		 * @param int          $decimals           Number of decimals.
		 * @param string       $decimal_separator  Decimal separator.
		 * @param string       $thousand_separator Thousand separator.
		 * @param float|string $original_price     Original price as float, or empty string. Since 5.0.0.
		 */
		$price = apply_filters( 'formatted_woocommerce_price', number_format( $price, $decimals, $dec_point, $thousand_sep ), $price, $decimals, $dec_point, $thousand_sep, $original_price );

		/**
		 * Filter formatted price.
		 *
		 * @since v1.0.0
		 */
		if ( apply_filters( 'woocommerce_price_trim_zeros', false ) && $decimals > 0 ) {
			$price = wc_trim_zeros( $price );
		}
		return (float) $price;
	}

	if ( ! function_exists( 'appsbd_get_select_option' ) ) {
		/**
		 * The appsbd get select option is generated by appsbd
		 *
		 * @param mixed  $value Its value.
		 * @param mixed  $text Its text field.
		 * @param string $selected Its selected filed.
		 * @param array  $attr Its extra attributes.
		 */
		function appsbd_get_select_option( $value, $text, $selected = '', $attr = array() ) {

			$attr_str = '';
			if ( is_array( $attr ) && count( $attr ) > 0 ) {
				foreach ( $attr as $key => $kvalue ) {
					$attr_str .= ' ' . $key . '="' . $kvalue . '"';
				}
			}
			if ( is_array( $selected ) ) {
				$is_selected = in_array( $value, $selected );
			} else {
				$is_selected = $selected == $value;
			}
			?>
			<option <?php echo esc_attr( $attr_str ); ?> <?php echo esc_attr( $is_selected ? ' selected ' : '' ); ?>
				value="<?php echo esc_attr( $value ); ?>"><?php echo wp_kses_post( $text ); ?></option>
			<?php
		}
	}
	if ( ! function_exists( 'appsbd_get_select_options' ) ) {
		/**
		 * The appsbd get select options is generated by appsbd
		 *
		 * @param array  $options Its the options array.
		 * @param string $selected Its selected option.
		 * @param array  $attr Its extra attributes.
		 */
		function appsbd_get_select_options( $options, $selected = '', $attr = array() ) {
			if ( is_array( $options ) ) {
				foreach ( $options as $key => $value ) {
					if ( is_array( $selected ) ) {
						appsbd_get_select_option( $key, $value, ( in_array( $key, $selected ) ? $key : '' ), $attr );
					} else {
						appsbd_get_select_option( $key, $value, $selected, $attr );
					}
				}
			}

		}
	}
}





